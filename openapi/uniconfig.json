{
  "openapi": "3.0.1",
  "info": {
    "title": "uniconfig",
    "description": "API generated from yang definitions: [aaa-encrypt-service-config,cli-native-extensions,cli-topology,cli-translate-registry,cli-unit-generic,connection-manager,crypto,device-discovery,dryrun-manager,fake,frinx-extensions,frinx-types,frinx-uniconfig-topology,general-entity,ietf-inet-types,ietf-netconf,ietf-netconf-monitoring,ietf-netconf-monitoring-extension,ietf-netconf-notifications,ietf-yang-library,ietf-yang-library,ietf-yang-types,journal,lldptopo,logging,nc-notifications,netconf-keystore,netconf-node-inventory,netconf-node-topology,network-topology,network-topology,notifications,odl-general-entity,opendaylight-inventory,restconf-logging,schema-resources,schema-settings,snapshot-manager,subtree-manager,template-manager,template-tags,transaction-log,uniconfig-config,uniconfig-manager,unified-topology,unitopo-translate-registry,yang-ext]",
    "version": "4.2.10.frinx"
  },
  "servers": [
    {
      "url": "/api/uniconfig",
      "description": "Frinx APi gateway"
    }
  ],
  "paths": {
    "/data/cli-translate-registry:available-cli-device-translations": {
      "get": {
        "tags": [
          "cli-translate-registry"
        ],
        "responses": {
          "200": {
            "description": "cli.translate.registry.AvailableCliDeviceTranslations",
            "content": {
              "application/json": {
                "schema": {
                  "title": "cli.translate.registry.AvailableCliDeviceTranslations.response",
                  "type": "object",
                  "properties": {
                    "cli-translate-registry:available-cli-device-translations": {
                      "$ref": "#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations"
                    }
                  },
                  "description": "cli.translate.registry.AvailableCliDeviceTranslations.response"
                }
              },
              "application/xml": {
                "schema": {
                  "title": "cli.translate.registry.AvailableCliDeviceTranslations.response",
                  "type": "object",
                  "properties": {
                    "cli-translate-registry:available-cli-device-translations": {
                      "$ref": "#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations"
                    }
                  },
                  "description": "cli.translate.registry.AvailableCliDeviceTranslations.response"
                }
              }
            }
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "creates or updates cli.translate.registry.AvailableCliDeviceTranslations",
        "requestBody": {
          "description": "cli.translate.registry.AvailableCliDeviceTranslations to be added or updated",
          "content": {
            "application/json": {
              "schema": {
                "title": "cli.translate.registry.AvailableCliDeviceTranslations.request",
                "type": "object",
                "properties": {
                  "cli-translate-registry:available-cli-device-translations": {
                    "$ref": "#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations"
                  }
                },
                "description": "cli.translate.registry.AvailableCliDeviceTranslations.request"
              }
            },
            "application/xml": {
              "schema": {
                "title": "cli.translate.registry.AvailableCliDeviceTranslations.request",
                "type": "object",
                "properties": {
                  "cli-translate-registry:available-cli-device-translations": {
                    "$ref": "#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations"
                  }
                },
                "description": "cli.translate.registry.AvailableCliDeviceTranslations.request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object modified",
            "content": {}
          },
          "201": {
            "description": "Object created",
            "content": {}
          },
          "204": {
            "description": "Object modified",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.translate.registry.AvailableCliDeviceTranslations.body-param"
      },
      "post": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "creates cli.translate.registry.AvailableCliDeviceTranslations",
        "requestBody": {
          "description": "cli.translate.registry.AvailableCliDeviceTranslations to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "409": {
            "description": "Object already exists",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.translate.registry.AvailableCliDeviceTranslations.body-param"
      },
      "delete": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "removes cli.translate.registry.AvailableCliDeviceTranslations",
        "responses": {
          "204": {
            "description": "Object deleted",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/data/cli-translate-registry:available-cli-device-translations/cli-translate-registry:available-cli-device-translation": {
      "post": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "creates cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation",
        "requestBody": {
          "description": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "409": {
            "description": "Object already exists",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation.body-param"
      }
    },
    "/data/cli-translate-registry:available-cli-device-translations/cli-translate-registry:available-cli-device-translation={device-type},{device-version}": {
      "get": {
        "tags": [
          "cli-translate-registry"
        ],
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation",
            "content": {
              "application/json": {
                "schema": {
                  "title": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation.response",
                  "type": "object",
                  "properties": {
                    "cli-translate-registry:available-cli-device-translation": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation"
                      }
                    }
                  },
                  "description": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation.response"
                }
              },
              "application/xml": {
                "schema": {
                  "title": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation.response",
                  "type": "object",
                  "properties": {
                    "cli-translate-registry:available-cli-device-translation": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation"
                      }
                    }
                  },
                  "description": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation.response"
                }
              }
            }
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "creates or updates cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation",
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation to be added or updated",
          "content": {
            "application/json": {
              "schema": {
                "title": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation.request",
                "type": "object",
                "properties": {
                  "cli-translate-registry:available-cli-device-translation": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation"
                    }
                  }
                },
                "description": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation.request"
              }
            },
            "application/xml": {
              "schema": {
                "title": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation.request",
                "type": "object",
                "properties": {
                  "cli-translate-registry:available-cli-device-translation": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation"
                    }
                  }
                },
                "description": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation.request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object modified",
            "content": {}
          },
          "201": {
            "description": "Object created",
            "content": {}
          },
          "204": {
            "description": "Object modified",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation.body-param"
      },
      "post": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "creates cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation",
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "409": {
            "description": "Object already exists",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation.body-param"
      },
      "delete": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "removes cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation",
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Object deleted",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/data/cli-translate-registry:available-cli-device-translations/cli-translate-registry:available-cli-device-translation={device-type},{device-version}/cli-translate-registry:default-commit-error-patterns": {
      "get": {
        "tags": [
          "cli-translate-registry"
        ],
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns",
            "content": {
              "application/json": {
                "schema": {
                  "title": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns.response",
                  "type": "object",
                  "properties": {
                    "cli-translate-registry:default-commit-error-patterns": {
                      "$ref": "#/components/schemas/cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns"
                    }
                  },
                  "description": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns.response"
                }
              },
              "application/xml": {
                "schema": {
                  "title": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns.response",
                  "type": "object",
                  "properties": {
                    "cli-translate-registry:default-commit-error-patterns": {
                      "$ref": "#/components/schemas/cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns"
                    }
                  },
                  "description": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns.response"
                }
              }
            }
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "creates or updates cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns",
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns to be added or updated",
          "content": {
            "application/json": {
              "schema": {
                "title": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns.request",
                "type": "object",
                "properties": {
                  "cli-translate-registry:default-commit-error-patterns": {
                    "$ref": "#/components/schemas/cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns"
                  }
                },
                "description": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns.request"
              }
            },
            "application/xml": {
              "schema": {
                "title": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns.request",
                "type": "object",
                "properties": {
                  "cli-translate-registry:default-commit-error-patterns": {
                    "$ref": "#/components/schemas/cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns"
                  }
                },
                "description": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns.request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object modified",
            "content": {}
          },
          "201": {
            "description": "Object created",
            "content": {}
          },
          "204": {
            "description": "Object modified",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns.body-param"
      },
      "post": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "creates cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns",
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "409": {
            "description": "Object already exists",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns.body-param"
      },
      "delete": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "removes cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns",
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Object deleted",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/data/cli-translate-registry:available-cli-device-translations/cli-translate-registry:available-cli-device-translation={device-type},{device-version}/cli-translate-registry:default-error-patterns": {
      "get": {
        "tags": [
          "cli-translate-registry"
        ],
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "cli.translate.registry.errorpatterns.DefaultErrorPatterns",
            "content": {
              "application/json": {
                "schema": {
                  "title": "cli.translate.registry.errorpatterns.DefaultErrorPatterns.response",
                  "type": "object",
                  "properties": {
                    "cli-translate-registry:default-error-patterns": {
                      "$ref": "#/components/schemas/cli.translate.registry.errorpatterns.DefaultErrorPatterns"
                    }
                  },
                  "description": "cli.translate.registry.errorpatterns.DefaultErrorPatterns.response"
                }
              },
              "application/xml": {
                "schema": {
                  "title": "cli.translate.registry.errorpatterns.DefaultErrorPatterns.response",
                  "type": "object",
                  "properties": {
                    "cli-translate-registry:default-error-patterns": {
                      "$ref": "#/components/schemas/cli.translate.registry.errorpatterns.DefaultErrorPatterns"
                    }
                  },
                  "description": "cli.translate.registry.errorpatterns.DefaultErrorPatterns.response"
                }
              }
            }
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "creates or updates cli.translate.registry.errorpatterns.DefaultErrorPatterns",
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cli.translate.registry.errorpatterns.DefaultErrorPatterns to be added or updated",
          "content": {
            "application/json": {
              "schema": {
                "title": "cli.translate.registry.errorpatterns.DefaultErrorPatterns.request",
                "type": "object",
                "properties": {
                  "cli-translate-registry:default-error-patterns": {
                    "$ref": "#/components/schemas/cli.translate.registry.errorpatterns.DefaultErrorPatterns"
                  }
                },
                "description": "cli.translate.registry.errorpatterns.DefaultErrorPatterns.request"
              }
            },
            "application/xml": {
              "schema": {
                "title": "cli.translate.registry.errorpatterns.DefaultErrorPatterns.request",
                "type": "object",
                "properties": {
                  "cli-translate-registry:default-error-patterns": {
                    "$ref": "#/components/schemas/cli.translate.registry.errorpatterns.DefaultErrorPatterns"
                  }
                },
                "description": "cli.translate.registry.errorpatterns.DefaultErrorPatterns.request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object modified",
            "content": {}
          },
          "201": {
            "description": "Object created",
            "content": {}
          },
          "204": {
            "description": "Object modified",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.translate.registry.errorpatterns.DefaultErrorPatterns.body-param"
      },
      "post": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "creates cli.translate.registry.errorpatterns.DefaultErrorPatterns",
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "cli.translate.registry.errorpatterns.DefaultErrorPatterns to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.errorpatterns.DefaultErrorPatterns"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.errorpatterns.DefaultErrorPatterns"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "409": {
            "description": "Object already exists",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.translate.registry.errorpatterns.DefaultErrorPatterns.body-param"
      },
      "delete": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "removes cli.translate.registry.errorpatterns.DefaultErrorPatterns",
        "parameters": [
          {
            "name": "device-type",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "device-version",
            "in": "path",
            "description": "Id of available-cli-device-translation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Object deleted",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/data/snapshot-manager:snapshots-metadata": {
      "get": {
        "tags": [
          "snapshot-manager"
        ],
        "responses": {
          "200": {
            "description": "snapshot.manager.SnapshotsMetadata",
            "content": {
              "application/json": {
                "schema": {
                  "title": "snapshot.manager.SnapshotsMetadata.response",
                  "type": "object",
                  "properties": {
                    "snapshot-manager:snapshots-metadata": {
                      "$ref": "#/components/schemas/snapshot.manager.SnapshotsMetadata"
                    }
                  },
                  "description": "snapshot.manager.SnapshotsMetadata.response"
                }
              },
              "application/xml": {
                "schema": {
                  "title": "snapshot.manager.SnapshotsMetadata.response",
                  "type": "object",
                  "properties": {
                    "snapshot-manager:snapshots-metadata": {
                      "$ref": "#/components/schemas/snapshot.manager.SnapshotsMetadata"
                    }
                  },
                  "description": "snapshot.manager.SnapshotsMetadata.response"
                }
              }
            }
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "creates or updates snapshot.manager.SnapshotsMetadata",
        "requestBody": {
          "description": "snapshot.manager.SnapshotsMetadata to be added or updated",
          "content": {
            "application/json": {
              "schema": {
                "title": "snapshot.manager.SnapshotsMetadata.request",
                "type": "object",
                "properties": {
                  "snapshot-manager:snapshots-metadata": {
                    "$ref": "#/components/schemas/snapshot.manager.SnapshotsMetadata"
                  }
                },
                "description": "snapshot.manager.SnapshotsMetadata.request"
              }
            },
            "application/xml": {
              "schema": {
                "title": "snapshot.manager.SnapshotsMetadata.request",
                "type": "object",
                "properties": {
                  "snapshot-manager:snapshots-metadata": {
                    "$ref": "#/components/schemas/snapshot.manager.SnapshotsMetadata"
                  }
                },
                "description": "snapshot.manager.SnapshotsMetadata.request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object modified",
            "content": {}
          },
          "201": {
            "description": "Object created",
            "content": {}
          },
          "204": {
            "description": "Object modified",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "snapshot.manager.SnapshotsMetadata.body-param"
      },
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "creates snapshot.manager.SnapshotsMetadata",
        "requestBody": {
          "description": "snapshot.manager.SnapshotsMetadata to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot.manager.SnapshotsMetadata"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/snapshot.manager.SnapshotsMetadata"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "409": {
            "description": "Object already exists",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "snapshot.manager.SnapshotsMetadata.body-param"
      },
      "delete": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "removes snapshot.manager.SnapshotsMetadata",
        "responses": {
          "204": {
            "description": "Object deleted",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/data/snapshot-manager:snapshots-metadata/snapshot-manager:snapshot": {
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "creates snapshot.manager.snapshotsmetadata.Snapshot",
        "requestBody": {
          "description": "snapshot.manager.snapshotsmetadata.Snapshot to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "409": {
            "description": "Object already exists",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "snapshot.manager.snapshotsmetadata.Snapshot.body-param"
      }
    },
    "/data/snapshot-manager:snapshots-metadata/snapshot-manager:snapshot={name}": {
      "get": {
        "tags": [
          "snapshot-manager"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Id of snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "snapshot.manager.snapshotsmetadata.Snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "title": "snapshot.manager.snapshotsmetadata.Snapshot.response",
                  "type": "object",
                  "properties": {
                    "snapshot-manager:snapshot": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
                      }
                    }
                  },
                  "description": "snapshot.manager.snapshotsmetadata.Snapshot.response"
                }
              },
              "application/xml": {
                "schema": {
                  "title": "snapshot.manager.snapshotsmetadata.Snapshot.response",
                  "type": "object",
                  "properties": {
                    "snapshot-manager:snapshot": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
                      }
                    }
                  },
                  "description": "snapshot.manager.snapshotsmetadata.Snapshot.response"
                }
              }
            }
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "creates or updates snapshot.manager.snapshotsmetadata.Snapshot",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Id of snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "snapshot.manager.snapshotsmetadata.Snapshot to be added or updated",
          "content": {
            "application/json": {
              "schema": {
                "title": "snapshot.manager.snapshotsmetadata.Snapshot.request",
                "type": "object",
                "properties": {
                  "snapshot-manager:snapshot": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
                    }
                  }
                },
                "description": "snapshot.manager.snapshotsmetadata.Snapshot.request"
              }
            },
            "application/xml": {
              "schema": {
                "title": "snapshot.manager.snapshotsmetadata.Snapshot.request",
                "type": "object",
                "properties": {
                  "snapshot-manager:snapshot": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
                    }
                  }
                },
                "description": "snapshot.manager.snapshotsmetadata.Snapshot.request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Object modified",
            "content": {}
          },
          "201": {
            "description": "Object created",
            "content": {}
          },
          "204": {
            "description": "Object modified",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "snapshot.manager.snapshotsmetadata.Snapshot.body-param"
      },
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "creates snapshot.manager.snapshotsmetadata.Snapshot",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Id of snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "snapshot.manager.snapshotsmetadata.Snapshot to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "409": {
            "description": "Object already exists",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "snapshot.manager.snapshotsmetadata.Snapshot.body-param"
      },
      "delete": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "removes snapshot.manager.snapshotsmetadata.Snapshot",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Id of snapshot",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Object deleted",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/operations/cli-unit-generic:execute": {
      "post": {
        "tags": [
          "cli-unit-generic"
        ],
        "operationId": "rpc_cli-unit-generic:execute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.execute.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.execute.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cli.unit.generic.Execute"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/cli.unit.generic.Execute"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.unit.generic.execute.Input.body-param"
      }
    },
    "/operations/cli-unit-generic:execute-and-expect": {
      "post": {
        "tags": [
          "cli-unit-generic"
        ],
        "operationId": "rpc_cli-unit-generic:execute-and-expect",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.executeandexpect.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.executeandexpect.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cli.unit.generic.ExecuteAndExpect"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/cli.unit.generic.ExecuteAndExpect"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.unit.generic.executeandexpect.Input.body-param"
      }
    },
    "/operations/cli-unit-generic:execute-and-read": {
      "post": {
        "tags": [
          "cli-unit-generic"
        ],
        "operationId": "rpc_cli-unit-generic:execute-and-read",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.executeandread.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.executeandread.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cli.unit.generic.ExecuteAndRead"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/cli.unit.generic.ExecuteAndRead"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.unit.generic.executeandread.Input.body-param"
      }
    },
    "/operations/cli-unit-generic:execute-and-read-until": {
      "post": {
        "tags": [
          "cli-unit-generic"
        ],
        "operationId": "rpc_cli-unit-generic:execute-and-read-until",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.executeandreaduntil.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.executeandreaduntil.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cli.unit.generic.ExecuteAndReadUntil"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/cli.unit.generic.ExecuteAndReadUntil"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "cli.unit.generic.executeandreaduntil.Input.body-param"
      }
    },
    "/operations/connection-manager:check-installed-nodes": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_connection-manager:check-installed-nodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.checkinstallednodes.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.checkinstallednodes.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.CheckInstalledNodes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.CheckInstalledNodes"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "connection.manager.checkinstallednodes.Input.body-param"
      }
    },
    "/operations/connection-manager:get-installed-nodes": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_connection-manager:get-installed-nodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.getinstallednodes.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.getinstallednodes.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.GetInstalledNodes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.GetInstalledNodes"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "connection.manager.getinstallednodes.Input.body-param"
      }
    },
    "/operations/connection-manager:install-multiple-nodes": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_connection-manager:install-multiple-nodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.installmultiplenodes.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.installmultiplenodes.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.InstallMultipleNodes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.InstallMultipleNodes"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "connection.manager.installmultiplenodes.Input.body-param"
      }
    },
    "/operations/connection-manager:install-node": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_connection-manager:install-node",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.installnode.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.installnode.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.InstallNode"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.InstallNode"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "connection.manager.installnode.Input.body-param"
      }
    },
    "/operations/connection-manager:mount-node": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_connection-manager:mount-node",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.mountnode.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.mountnode.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.MountNode"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.MountNode"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "connection.manager.mountnode.Input.body-param"
      }
    },
    "/operations/connection-manager:uninstall-multiple-nodes": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_connection-manager:uninstall-multiple-nodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.uninstallmultiplenodes.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.uninstallmultiplenodes.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.UninstallMultipleNodes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.UninstallMultipleNodes"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "connection.manager.uninstallmultiplenodes.Input.body-param"
      }
    },
    "/operations/connection-manager:uninstall-node": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_connection-manager:uninstall-node",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.uninstallnode.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.uninstallnode.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.UninstallNode"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.UninstallNode"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "connection.manager.uninstallnode.Input.body-param"
      }
    },
    "/operations/connection-manager:unmount-node": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_connection-manager:unmount-node",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.unmountnode.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.unmountnode.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.UnmountNode"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/connection.manager.UnmountNode"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "connection.manager.unmountnode.Input.body-param"
      }
    },
    "/operations/device-discovery:discover": {
      "post": {
        "tags": [
          "device-discovery"
        ],
        "operationId": "rpc_device-discovery:discover",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/device.discovery.discover.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/device.discovery.discover.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/device.discovery.Discover"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/device.discovery.Discover"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "device.discovery.discover.Input.body-param"
      }
    },
    "/operations/dryrun-manager:dryrun-commit": {
      "post": {
        "tags": [
          "dryrun-manager"
        ],
        "operationId": "rpc_dryrun-manager:dryrun-commit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/dryrun.manager.dryruncommit.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/dryrun.manager.dryruncommit.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dryrun.manager.DryrunCommit"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/dryrun.manager.DryrunCommit"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "dryrun.manager.dryruncommit.Input.body-param"
      }
    },
    "/operations/journal:clear-journal": {
      "post": {
        "tags": [
          "journal"
        ],
        "operationId": "rpc_journal:clear-journal",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal.ClearJournal"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/journal.ClearJournal"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        }
      }
    },
    "/operations/journal:read-journal": {
      "post": {
        "tags": [
          "journal"
        ],
        "operationId": "rpc_journal:read-journal",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal.ReadJournal"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/journal.ReadJournal"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        }
      }
    },
    "/operations/logging:disable-default-device-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_logging:disable-default-device-logging",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.disabledefaultdevicelogging.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.disabledefaultdevicelogging.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logging.DisableDefaultDeviceLogging"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/logging.DisableDefaultDeviceLogging"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "logging.disabledefaultdevicelogging.Input.body-param"
      }
    },
    "/operations/logging:disable-device-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_logging:disable-device-logging",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.disabledevicelogging.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.disabledevicelogging.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logging.DisableDeviceLogging"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/logging.DisableDeviceLogging"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "logging.disabledevicelogging.Input.body-param"
      }
    },
    "/operations/logging:disable-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_logging:disable-logging",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.disablelogging.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.disablelogging.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logging.DisableLogging"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/logging.DisableLogging"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "logging.disablelogging.Input.body-param"
      }
    },
    "/operations/logging:enable-default-device-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_logging:enable-default-device-logging",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.enabledefaultdevicelogging.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.enabledefaultdevicelogging.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logging.EnableDefaultDeviceLogging"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/logging.EnableDefaultDeviceLogging"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "logging.enabledefaultdevicelogging.Input.body-param"
      }
    },
    "/operations/logging:enable-device-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_logging:enable-device-logging",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.enabledevicelogging.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.enabledevicelogging.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logging.EnableDeviceLogging"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/logging.EnableDeviceLogging"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "logging.enabledevicelogging.Input.body-param"
      }
    },
    "/operations/logging:enable-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_logging:enable-logging",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.enablelogging.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.enablelogging.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logging.EnableLogging"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/logging.EnableLogging"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "logging.enablelogging.Input.body-param"
      }
    },
    "/operations/logging:set-global-hidden-types": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_logging:set-global-hidden-types",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.setglobalhiddentypes.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.setglobalhiddentypes.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/logging.SetGlobalHiddenTypes"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/logging.SetGlobalHiddenTypes"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "logging.setglobalhiddentypes.Input.body-param"
      }
    },
    "/operations/netconf-keystore:add-keystore-entry": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_netconf-keystore:add-keystore-entry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.addkeystoreentry.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.addkeystoreentry.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "netconf.keystore.addkeystoreentry.Input.body-param"
      }
    },
    "/operations/netconf-keystore:add-private-key": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_netconf-keystore:add-private-key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.addprivatekey.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.addprivatekey.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "netconf.keystore.addprivatekey.Input.body-param"
      }
    },
    "/operations/netconf-keystore:add-trusted-certificate": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_netconf-keystore:add-trusted-certificate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.addtrustedcertificate.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.addtrustedcertificate.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "netconf.keystore.addtrustedcertificate.Input.body-param"
      }
    },
    "/operations/netconf-keystore:remove-keystore-entry": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_netconf-keystore:remove-keystore-entry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.removekeystoreentry.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.removekeystoreentry.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "netconf.keystore.removekeystoreentry.Input.body-param"
      }
    },
    "/operations/netconf-keystore:remove-private-key": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_netconf-keystore:remove-private-key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.removeprivatekey.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.removeprivatekey.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "netconf.keystore.removeprivatekey.Input.body-param"
      }
    },
    "/operations/netconf-keystore:remove-trusted-certificate": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_netconf-keystore:remove-trusted-certificate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.removetrustedcertificate.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.removetrustedcertificate.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "netconf.keystore.removetrustedcertificate.Input.body-param"
      }
    },
    "/operations/notifications:create-subscription": {
      "post": {
        "tags": [
          "notifications"
        ],
        "operationId": "rpc_notifications:create-subscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/notifications.createsubscription.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/notifications.createsubscription.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "notifications.createsubscription.Input.body-param"
      }
    },
    "/operations/restconf-logging:set-hidden-http-headers": {
      "post": {
        "tags": [
          "restconf-logging"
        ],
        "operationId": "rpc_restconf-logging:set-hidden-http-headers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/restconf.logging.sethiddenhttpheaders.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/restconf.logging.sethiddenhttpheaders.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/restconf.logging.SetHiddenHttpHeaders"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/restconf.logging.SetHiddenHttpHeaders"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "restconf.logging.sethiddenhttpheaders.Input.body-param"
      }
    },
    "/operations/restconf-logging:set-hidden-http-methods": {
      "post": {
        "tags": [
          "restconf-logging"
        ],
        "operationId": "rpc_restconf-logging:set-hidden-http-methods",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/restconf.logging.sethiddenhttpmethods.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/restconf.logging.sethiddenhttpmethods.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/restconf.logging.SetHiddenHttpMethods"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/restconf.logging.SetHiddenHttpMethods"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "restconf.logging.sethiddenhttpmethods.Input.body-param"
      }
    },
    "/operations/schema-resources:register-repository": {
      "post": {
        "tags": [
          "schema-resources"
        ],
        "operationId": "rpc_schema-resources:register-repository",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/schema.resources.registerrepository.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/schema.resources.registerrepository.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schema.resources.RegisterRepository"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/schema.resources.RegisterRepository"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "schema.resources.registerrepository.Input.body-param"
      }
    },
    "/operations/snapshot-manager:create-snapshot": {
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "operationId": "rpc_snapshot-manager:create-snapshot",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/snapshot.manager.createsnapshot.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/snapshot.manager.createsnapshot.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snapshot.manager.CreateSnapshot"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/snapshot.manager.CreateSnapshot"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "snapshot.manager.createsnapshot.Input.body-param"
      }
    },
    "/operations/snapshot-manager:delete-snapshot": {
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "operationId": "rpc_snapshot-manager:delete-snapshot",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/snapshot.manager.deletesnapshot.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/snapshot.manager.deletesnapshot.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snapshot.manager.DeleteSnapshot"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/snapshot.manager.DeleteSnapshot"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "snapshot.manager.deletesnapshot.Input.body-param"
      }
    },
    "/operations/snapshot-manager:replace-config-with-snapshot": {
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "operationId": "rpc_snapshot-manager:replace-config-with-snapshot",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/snapshot.manager.replaceconfigwithsnapshot.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/snapshot.manager.replaceconfigwithsnapshot.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snapshot.manager.ReplaceConfigWithSnapshot"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/snapshot.manager.ReplaceConfigWithSnapshot"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "snapshot.manager.replaceconfigwithsnapshot.Input.body-param"
      }
    },
    "/operations/subtree-manager:calculate-subtree-diff": {
      "post": {
        "tags": [
          "subtree-manager"
        ],
        "operationId": "rpc_subtree-manager:calculate-subtree-diff",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.calculatesubtreediff.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.calculatesubtreediff.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subtree.manager.CalculateSubtreeDiff"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/subtree.manager.CalculateSubtreeDiff"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "subtree.manager.calculatesubtreediff.Input.body-param"
      }
    },
    "/operations/subtree-manager:calculate-subtree-git-like-diff": {
      "post": {
        "tags": [
          "subtree-manager"
        ],
        "operationId": "rpc_subtree-manager:calculate-subtree-git-like-diff",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.calculatesubtreegitlikediff.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.calculatesubtreegitlikediff.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subtree.manager.CalculateSubtreeGitLikeDiff"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/subtree.manager.CalculateSubtreeGitLikeDiff"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "subtree.manager.calculatesubtreegitlikediff.Input.body-param"
      }
    },
    "/operations/subtree-manager:copy-many-to-one": {
      "post": {
        "tags": [
          "subtree-manager"
        ],
        "operationId": "rpc_subtree-manager:copy-many-to-one",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.copymanytoone.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.copymanytoone.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subtree.manager.CopyManyToOne"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/subtree.manager.CopyManyToOne"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "subtree.manager.copymanytoone.Input.body-param"
      }
    },
    "/operations/subtree-manager:copy-one-to-many": {
      "post": {
        "tags": [
          "subtree-manager"
        ],
        "operationId": "rpc_subtree-manager:copy-one-to-many",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.copyonetomany.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.copyonetomany.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subtree.manager.CopyOneToMany"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/subtree.manager.CopyOneToMany"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "subtree.manager.copyonetomany.Input.body-param"
      }
    },
    "/operations/subtree-manager:copy-one-to-one": {
      "post": {
        "tags": [
          "subtree-manager"
        ],
        "operationId": "rpc_subtree-manager:copy-one-to-one",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.copyonetoone.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.copyonetoone.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subtree.manager.CopyOneToOne"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/subtree.manager.CopyOneToOne"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "subtree.manager.copyonetoone.Input.body-param"
      }
    },
    "/operations/template-manager:apply-template": {
      "post": {
        "tags": [
          "template-manager"
        ],
        "operationId": "rpc_template-manager:apply-template",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/template.manager.applytemplate.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/template.manager.applytemplate.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template.manager.ApplyTemplate"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/template.manager.ApplyTemplate"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "template.manager.applytemplate.Input.body-param"
      }
    },
    "/operations/template-manager:get-template-info": {
      "post": {
        "tags": [
          "template-manager"
        ],
        "operationId": "rpc_template-manager:get-template-info",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/template.manager.gettemplateinfo.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/template.manager.gettemplateinfo.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/template.manager.GetTemplateInfo"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/template.manager.GetTemplateInfo"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "template.manager.gettemplateinfo.Input.body-param"
      }
    },
    "/operations/transaction-log:revert-changes": {
      "post": {
        "tags": [
          "transaction-log"
        ],
        "operationId": "rpc_transaction-log:revert-changes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/transaction.log.revertchanges.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/transaction.log.revertchanges.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction.log.RevertChanges"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/transaction.log.RevertChanges"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "transaction.log.revertchanges.Input.body-param"
      }
    },
    "/operations/uniconfig-manager:calculate-diff": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_uniconfig-manager:calculate-diff",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.calculatediff.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.calculatediff.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.CalculateDiff"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.CalculateDiff"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "uniconfig.manager.calculatediff.Input.body-param"
      }
    },
    "/operations/uniconfig-manager:calculate-git-like-diff": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_uniconfig-manager:calculate-git-like-diff",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.calculategitlikediff.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.calculategitlikediff.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.CalculateGitLikeDiff"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.CalculateGitLikeDiff"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "uniconfig.manager.calculategitlikediff.Input.body-param"
      }
    },
    "/operations/uniconfig-manager:checked-commit": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_uniconfig-manager:checked-commit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.checkedcommit.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.checkedcommit.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.CheckedCommit"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.CheckedCommit"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "uniconfig.manager.checkedcommit.Input.body-param"
      }
    },
    "/operations/uniconfig-manager:commit": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_uniconfig-manager:commit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.commit.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.commit.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.Commit"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.Commit"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "uniconfig.manager.commit.Input.body-param"
      }
    },
    "/operations/uniconfig-manager:health": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_uniconfig-manager:health",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.Health"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.Health"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        }
      }
    },
    "/operations/uniconfig-manager:is-in-sync": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_uniconfig-manager:is-in-sync",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.isinsync.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.isinsync.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.IsInSync"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.IsInSync"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "uniconfig.manager.isinsync.Input.body-param"
      }
    },
    "/operations/uniconfig-manager:replace-config-with-operational": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_uniconfig-manager:replace-config-with-operational",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.replaceconfigwithoperational.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.replaceconfigwithoperational.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.ReplaceConfigWithOperational"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.ReplaceConfigWithOperational"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "uniconfig.manager.replaceconfigwithoperational.Input.body-param"
      }
    },
    "/operations/uniconfig-manager:show-connection-status": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_uniconfig-manager:show-connection-status",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.showconnectionstatus.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.showconnectionstatus.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.ShowConnectionStatus"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.ShowConnectionStatus"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "uniconfig.manager.showconnectionstatus.Input.body-param"
      }
    },
    "/operations/uniconfig-manager:sync-from-network": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_uniconfig-manager:sync-from-network",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.syncfromnetwork.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.syncfromnetwork.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.SyncFromNetwork"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.SyncFromNetwork"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "uniconfig.manager.syncfromnetwork.Input.body-param"
      }
    },
    "/operations/uniconfig-manager:validate": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_uniconfig-manager:validate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.validate.Input"
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.validate.Input"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.Validate"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/uniconfig.manager.Validate"
                }
              }
            }
          },
          "201": {
            "description": "No response",
            "content": {}
          },
          "400": {
            "description": "Internal error",
            "content": {}
          },
          "401": {
            "description": "No response",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "uniconfig.manager.validate.Input.body-param"
      }
    }
  },
  "components": {
    "schemas": {
      "cli.topology.JournalLevel": {
        "type": "string",
        "enum": [
          "command-only",
          "extended"
        ]
      },
      "cli.topology.ParsingEngine": {
        "type": "string",
        "enum": [
          "batch-parser",
          "tree-parser",
          "one-line-parser"
        ]
      },
      "cli.topology.TransportTypeEnumeration": {
        "type": "string",
        "enum": [
          "ssh",
          "telnet"
        ]
      },
      "cli.translate.registry.AvailableCliDeviceTranslations": {
        "type": "object",
        "properties": {
          "available-cli-device-translation": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation"
            }
          }
        },
        "description": ""
      },
      "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation": {
        "type": "object",
        "properties": {
          "default-commit-error-patterns": {
            "$ref": "#/components/schemas/cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns"
          },
          "device-type": {
            "type": "string",
            "description": ""
          },
          "default-error-patterns": {
            "$ref": "#/components/schemas/cli.translate.registry.errorpatterns.DefaultErrorPatterns"
          },
          "device-version": {
            "type": "string",
            "description": ""
          }
        },
        "description": ""
      },
      "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns": {
        "type": "object",
        "properties": {
          "commit-error-pattern": {
            "type": "array",
            "description": "Device specific commit error patterns.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Device specific list of commit error patterns. The following list\nof patterns is checked in the input after 'commit' command is sent."
      },
      "cli.translate.registry.errorpatterns.DefaultErrorPatterns": {
        "type": "object",
        "properties": {
          "error-pattern": {
            "type": "array",
            "description": "Device specific error patterns.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Device specific list of error patterns. This list is the primary source\nof error checking on the device. This list can be overridden from the code."
      },
      "cli.unit.generic.Execute": {
        "type": "object",
        "properties": {
          "output": {
            "title": "cli.unit.generic.execute.Output",
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the executed RPC."
              }
            },
            "description": ""
          }
        },
        "description": "Simple execution of single or multiple commands on remote terminal. Multiple commands must be\nseparated by newline in the input. After all commands are executed, the last output is not checked\nagainst expected output. Also, the outputs from commands are not collected - output of this RPC\ncontains only status message."
      },
      "cli.unit.generic.ExecuteAndExpect": {
        "type": "object",
        "properties": {
          "output": {
            "title": "cli.unit.generic.executeandexpect.Output",
            "type": "object",
            "properties": {
              "output": {
                "type": "string",
                "description": "Output that is composed from the inputs/prompts/outputs of executed commands."
              }
            },
            "description": ""
          }
        },
        "description": "Form of the 'execute-and-read' RPC that can contain 'expect(..)' patterns used for waiting\nfor specific outputs/prompts. It can be used for execution of interactive commands that require\nmultiple subsequent inputs with different preceding prompts. The 'expect(..)' pattern can contain\nrandom Java-based regular expression typed between the brackets. Every pattern must be specified\non the separated line and the next line cannot contain another 'expect(..)' pattern. Output of this\nRPC reflects the whole dialogue between ODL client and remote terminal except the initial\ncommand-prompt."
      },
      "cli.unit.generic.ExecuteAndRead": {
        "type": "object",
        "properties": {
          "output": {
            "title": "cli.unit.generic.executeandread.Output",
            "type": "object",
            "properties": {
              "output": {
                "type": "string",
                "description": "Output that is composed from the inputs/prompts/outputs of executed commands."
              }
            },
            "description": ""
          }
        },
        "description": "Execution of the sequence of commands specified in the input. These commands must be separated\nby the new line - then, each of the command is executed separately. After all commands are executed,\nit is assumed, that the original command prompt (prompt that was set before execution of this RPC)\nappears on the remote terminal. If the input contains only single command, output of this RPC will\ncontain only output of this command. If input contains multiple commands separated by newline, output\nof this RPC will be built from command prompts (except the prompt of the first command), input commands\nand outputs returned from remote terminal."
      },
      "cli.unit.generic.ExecuteAndReadUntil": {
        "type": "object",
        "properties": {
          "output": {
            "title": "cli.unit.generic.executeandreaduntil.Output",
            "type": "object",
            "properties": {
              "output": {
                "type": "string",
                "description": "Output that is composed from the inputs/prompts/outputs of executed commands."
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "cli.unit.generic.execute.Input": {
        "type": "object",
        "properties": {
          "wait-for-output-timer": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "If no output is received during this time, then execute next command.\nCommands are sent without waiting for their echo.",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "Input configuration snippet (one or multiple commands separated by newline)."
          }
        },
        "description": ""
      },
      "cli.unit.generic.executeandexpect.Input": {
        "type": "object",
        "properties": {
          "wait-for-output-timer": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "If no output is received during this time, then execute next command.\nCommands are sent without waiting for their echo.",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "Input configuration snippet (one or multiple commands separated by newline)."
          }
        },
        "description": ""
      },
      "cli.unit.generic.executeandread.Input": {
        "type": "object",
        "properties": {
          "wait-for-output-timer": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "If no output is received during this time, then execute next command.\nCommands are sent without waiting for their echo.",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "Input configuration snippet (one or multiple commands separated by newline)."
          }
        },
        "description": ""
      },
      "cli.unit.generic.executeandreaduntil.Input": {
        "type": "object",
        "properties": {
          "wait-for-output-timer": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "If no output is received during this time, then execute next command.\nCommands are sent without waiting for their echo.",
            "format": "int32"
          },
          "last-output": {
            "type": "string",
            "description": "Expected last output of the last command - it is usually name of the prompt in the\nspecific configuration mode."
          },
          "command": {
            "type": "string",
            "description": "Input configuration snippet (one or multiple commands separated by newline)."
          }
        },
        "description": ""
      },
      "connection.manager.CheckInstalledNodes": {
        "type": "object",
        "properties": {
          "output": {
            "title": "connection.manager.checkinstallednodes.Output",
            "type": "object",
            "properties": {
              "nodes": {
                "type": "array",
                "description": "List of node identifiers.",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": "Returns a list of all installed nodes from the node list in input."
      },
      "connection.manager.ConnectionType": {
        "type": "string",
        "enum": [
          "cli",
          "netconf",
          "uniconfig-preferred-connection",
          "gnmi"
        ]
      },
      "connection.manager.GetInstalledNodes": {
        "type": "object",
        "properties": {
          "output": {
            "title": "connection.manager.getinstallednodes.Output",
            "type": "object",
            "properties": {
              "nodes": {
                "type": "array",
                "description": "List of node identifiers.",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": "Returns list of all installed nodes or for the given mount-type."
      },
      "connection.manager.InstallMultipleNodes": {
        "type": "object",
        "properties": {
          "output": {
            "title": "connection.manager.installmultiplenodes.Output",
            "type": "object",
            "properties": {
              "node-results": {
                "type": "array",
                "description": "",
                "items": {
                  "title": "connection.manager.multiplenodesoutputfields.NodeResults",
                  "type": "object",
                  "properties": {
                    "node-id": {
                      "type": "string",
                      "description": "Node identifier of CLI/NETCONF node."
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Message that described occured error during invocation of operation on a specific node."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "description": "Installation of multiple nodes into Uniconfig database using input settings.\nThis RPC completes when:\na. node is successfully installed into Uniconfig database,\nb. installation of node fails because node cannot be mounted or configuration cannot be synced\n   from device into database,\nc. node has already been installed (failure)."
      },
      "connection.manager.InstallNode": {
        "type": "object",
        "properties": {
          "output": {
            "title": "connection.manager.installnode.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Message that described occured error during invocation of operation."
              },
              "status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Installation of node into Uniconfig database using input settings. This RPC completes when:\na. node is successfully installed into Uniconfig database,\nb. installation of node fails because node cannot be mounted or configuration cannot be synced\n   from device into database,\nc. node has already been installed (failure)."
      },
      "connection.manager.MountNode": {
        "type": "object",
        "properties": {
          "output": {
            "title": "connection.manager.mountnode.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Message that described occured error during invocation of operation."
              },
              "status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Mounting node into CLI/NETCONF/Unified layer depending on the input 'connection-type'.\nThis RPC completes when:\na. mountpoint on the corresponding layer is successfully created,\nb. some failure occurs during mounting process,\nc. mountpoint has already been created."
      },
      "connection.manager.MountType": {
        "type": "string",
        "enum": [
          "cli",
          "netconf",
          "uniconfig-preferred-connection",
          "gnmi"
        ]
      },
      "connection.manager.UninstallMultipleNodes": {
        "type": "object",
        "properties": {
          "output": {
            "title": "connection.manager.uninstallmultiplenodes.Output",
            "type": "object",
            "properties": {
              "node-results": {
                "type": "array",
                "description": "",
                "items": {
                  "title": "connection.manager.multiplenodesoutputfields.NodeResults",
                  "type": "object",
                  "properties": {
                    "node-id": {
                      "type": "string",
                      "description": "Node identifier of CLI/NETCONF node."
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Message that described occured error during invocation of operation on a specific node."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "description": "Uninstallation of multiple nodes with specific ID and connection-type from Uniconfig database.\nThis RPC completes when:\na. node is successfully removed from Uniconfig database,\nb. unistallation of node fails,\nc. node has already been uninstalled (failure).\nWarning: uninstallation process doesn't unmount node from Uniconfig instance and is not affected\nby current state of associated mountpoints."
      },
      "connection.manager.UninstallNode": {
        "type": "object",
        "properties": {
          "output": {
            "title": "connection.manager.uninstallnode.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Message that described occured error during invocation of operation."
              },
              "status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Uninstallation of node with specific ID and connection-type from Uniconfig database.\nThis RPC completes when:\na. node is successfully removed from Uniconfig database,\nb. unistallation of node fails,\nc. node has already been uninstalled (failure).\nWarning: uninstallation process doesn't unmount node from Uniconfig instance and is not affected\nby current state of associated mountpoints."
      },
      "connection.manager.UnmountNode": {
        "type": "object",
        "properties": {
          "output": {
            "title": "connection.manager.unmountnode.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Message that described occured error during invocation of operation."
              },
              "status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Unmounting node from CLI/NETCONF/Unified layer. This RPC completes when:\na. mountpoint from the correspoding layer is successfully removed,\nb. some failure occurs during unmounting process,\nc. node has already been unmounted."
      },
      "connection.manager.checkinstallednodes.Input": {
        "type": "object",
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "connection.manager.getinstallednodes.Input": {
        "type": "object",
        "properties": {
          "mount-type": {
            "$ref": "#/components/schemas/connection.manager.MountType"
          }
        },
        "description": ""
      },
      "connection.manager.installmultiplenodes.Input": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "description": "",
            "items": {
              "title": "connection.manager.installmultiplenodes.input.Nodes",
              "type": "object",
              "properties": {
                "node-id": {
                  "type": "string",
                  "description": "Node identifier of CLI/NETCONF node."
                },
                "cli": {
                  "title": "connection.manager.installmultiplenodes.input.nodes.Cli",
                  "type": "object",
                  "properties": {
                    "cli-topology:device-type": {
                      "type": "string",
                      "description": ""
                    },
                    "uniconfig-config:confirmed-commit-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
                    },
                    "secret": {
                      "type": "string",
                      "description": "Privileged EXEC mode password for Cisco IOS devices. If not set credentials\npassword will be used",
                      "x-choice": "privileged-mode-credentials:ios-enable-password"
                    },
                    "cli-topology:dry-run-journal-size": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Size of the DRY RUN cli mountpoint jounral. DRY RUN journal captures commands that would be\nexecuted when reading/writing some configuration. However the commands are not actually sent\nto the device",
                      "format": "int32"
                    },
                    "keepalive-initial-delay": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:keepalive"
                    },
                    "password": {
                      "type": "string",
                      "description": "",
                      "x-choice": "credentials:login-password"
                    },
                    "keepalive-timeout": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:keepalive"
                    },
                    "uniconfig-config:crypto": {
                      "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                      "type": "object",
                      "properties": {
                        "public-key-path": {
                          "type": "string",
                          "description": "Path to leaf containing public key in Base64 binary format."
                        },
                        "public-key-cipher-type": {
                          "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                        }
                      },
                      "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
                    },
                    "cli-topology:max-reconnection-attempts": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.\nThis is an optional parameter. If set, max-connection-attempts will be used only once,\nfor the first connection attempts and for any subsequent disconnect-connect cycles,\nmax-reconnect-attempts will be used. This enables users using different amount of reconnects\nfor initial attempts vs subsequent reconnects.",
                      "format": "int64"
                    },
                    "uniconfig-config:install-uniconfig-node-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "connection-lazy-timeout": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Maximal time (in seconds) for connection to keep alive, if no activity was detected\nin the session and the timeout has been reached, connection will be stopped",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:lazy"
                    },
                    "cli-topology:device-version": {
                      "type": "string",
                      "description": ""
                    },
                    "cli-topology:max-connection-attempts": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Maximum number of connection attempts before connection initialization is marked as failed.\nValue 0 disables this limit.",
                      "format": "int64"
                    },
                    "connection-establish-timeout": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Maximal time (in seconds) for connection establishment, if a connection attempt does\nnot succeed in this time, the attempt is considered a failure",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:lazy"
                    },
                    "cli-topology:pass-through": {
                      "title": "cli.topology.clinodeconnectionstatus.PassThrough",
                      "type": "object",
                      "properties": {},
                      "description": "When the underlying node is connected, its cli context\nis available verbatim under this container through the\nmount extension."
                    },
                    "cli-topology:host": {
                      "type": "string",
                      "description": ""
                    },
                    "cli-topology:default-error-patterns": {
                      "$ref": "#/components/schemas/cli.translate.registry.errorpatterns.DefaultErrorPatterns"
                    },
                    "cli-topology:transport-type": {
                      "$ref": "#/components/schemas/cli.topology.TransportTypeEnumeration"
                    },
                    "blacklist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are not invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:bl"
                    },
                    "uniconfig-config:validation-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send validate RPC before commit RPC."
                    },
                    "whitelist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:wl"
                    },
                    "cli-topology:default-commit-error-patterns": {
                      "$ref": "#/components/schemas/cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns"
                    },
                    "cli-topology:journal-level": {
                      "$ref": "#/components/schemas/cli.topology.JournalLevel"
                    },
                    "uniconfig-config:sequence-read-active": {
                      "type": "boolean",
                      "description": "Forces reading of data sequentially when mounting device."
                    },
                    "keepalive-delay": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:keepalive"
                    },
                    "cli-topology:journal-size": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Size of the cli mountpoint jounral. Journal keeps track of executed commands and makes\nthem available for users/apps for debugging purposes. Value 0 disables journaling",
                      "format": "int32"
                    },
                    "command-timeout": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Maximal time (in seconds) for command execution, if a command cannot be executed on\na device in this time, the execution is considered a failure",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:lazy"
                    },
                    "uniconfig-config:uniconfig-native-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "cli-topology:port": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "",
                      "format": "int32"
                    },
                    "cli-topology:parsing-engine": {
                      "$ref": "#/components/schemas/cli.topology.ParsingEngine"
                    },
                    "username": {
                      "type": "string",
                      "description": "",
                      "x-choice": "credentials:login-password"
                    }
                  },
                  "description": "CLI node settings."
                },
                "netconf": {
                  "title": "connection.manager.installmultiplenodes.input.nodes.Netconf",
                  "type": "object",
                  "properties": {
                    "netconf-node-topology:edit-config-test-option": {
                      "$ref": "#/components/schemas/netconf.node.topology.EditConfigTestOptionEnumeration"
                    },
                    "netconf-node-topology:sleep-factor": {
                      "maximum": 922337203685477600,
                      "minimum": -922337203685477600,
                      "type": "integer",
                      "description": "",
                      "format": "int32"
                    },
                    "netconf-node-topology:keepalive-delay": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds\nIf a value <1 is provided, no keepalives will be sent",
                      "format": "int64"
                    },
                    "netconf-node-topology:default-request-timeout-millis": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Timeout for blocking operations within transactions.",
                      "format": "int64"
                    },
                    "uniconfig-config:confirmed-commit-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
                    },
                    "netconf-node-topology:tcp-only": {
                      "type": "boolean",
                      "description": ""
                    },
                    "netconf-node-topology:yang-module-capabilities": {
                      "title": "netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities",
                      "type": "object",
                      "properties": {
                        "capability": {
                          "type": "array",
                          "description": "Set a list of capabilities to override capabilities provided in device's hello message.\nCan be used for devices that do not report any yang modules in their hello message",
                          "items": {
                            "type": "string"
                          }
                        },
                        "override": {
                          "type": "boolean",
                          "description": "Whether to override or merge this list of capabilities with capabilities from device"
                        }
                      },
                      "description": ""
                    },
                    "netconf-node-topology:max-reconnection-attempts": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.\nThis is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts\nand for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.\nThis enables users using different amount of reconnects for initial attempts vs subsequent reconnects.",
                      "format": "int64"
                    },
                    "netconf-node-topology:port": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "",
                      "format": "int32"
                    },
                    "netconf-node-topology:yang-library": {
                      "title": "netconf.node.topology.netconfschemastorage.YangLibrary",
                      "type": "object",
                      "properties": {
                        "password": {
                          "type": "string",
                          "description": ""
                        },
                        "yang-library-url": {
                          "type": "string",
                          "description": "Yang library to be plugged as additional source provider into the shared schema repository"
                        },
                        "username": {
                          "type": "string",
                          "description": ""
                        }
                      },
                      "description": ""
                    },
                    "netconf-node-topology:dry-run-journal-size": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that\nwould be executed when reading/writing some configuration. However the RPCs are not actually\nsent to the device",
                      "format": "int32"
                    },
                    "netconf-node-topology:odl-hello-message-capabilities": {
                      "title": "netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities",
                      "type": "object",
                      "properties": {
                        "capability": {
                          "type": "array",
                          "description": "Certain devices are non-accepting of ODL's hello message.  This allows specification of\na custom ODL hello message based on a list of supported capabilities.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": ""
                    },
                    "netconf-node-topology:enabled-notifications": {
                      "type": "boolean",
                      "description": "If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will\nexpose NETCONF notification and subscription services."
                    },
                    "netconf-node-topology:connection-timeout-millis": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Specifies timeout in milliseconds after which connection must be established.",
                      "format": "int64"
                    },
                    "password": {
                      "type": "string",
                      "description": "",
                      "x-choice": "credentials:login-password"
                    },
                    "netconf-node-topology:parent-node-id": {
                      "type": "string",
                      "description": "Identifier of the parent node with which the current node shares the lifecycle."
                    },
                    "netconf-node-topology:between-attempts-timeout-millis": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Initial timeout in milliseconds to wait between connection attempts. Will be multiplied by sleep-factor with every additional attempt",
                      "format": "int32"
                    },
                    "netconf-node-topology:strict-parsing": {
                      "type": "boolean",
                      "description": "If this parameter is set to 'false', then parser should ignore unknown elements and not throw\nexception during parsing."
                    },
                    "uniconfig-config:crypto": {
                      "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                      "type": "object",
                      "properties": {
                        "public-key-path": {
                          "type": "string",
                          "description": "Path to leaf containing public key in Base64 binary format."
                        },
                        "public-key-cipher-type": {
                          "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                        }
                      },
                      "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
                    },
                    "netconf-node-topology:max-connection-attempts": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Maximum number of connection retries. Non positive value or null is interpreted as infinity.",
                      "format": "int64"
                    },
                    "uniconfig-config:install-uniconfig-node-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "netconf-node-topology:concurrent-rpc-limit": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Limit of concurrent messages that can be send before reply messages are received.\nIf value <1 is provided, no limit will be enforced",
                      "format": "int32"
                    },
                    "netconf-node-topology:schema-cache-directory": {
                      "type": "string",
                      "description": "The destination schema repository for yang files relative to the cache directory.  This may be specified per netconf mount\nso that the loaded yang files are stored to a distinct directory to avoid potential conflict."
                    },
                    "netconf-node-topology:pass-through": {
                      "title": "netconf.node.topology.netconfnodeconnectionstatus.PassThrough",
                      "type": "object",
                      "properties": {},
                      "description": "When the underlying node is connected, its NETCONF context\nis available verbatim under this container through the\nmount extension."
                    },
                    "netconf-node-topology:non-module-capabilities": {
                      "title": "netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities",
                      "type": "object",
                      "properties": {
                        "capability": {
                          "type": "array",
                          "description": "Set a list of non-module based capabilities to override or merge non-module capabilities\nprovided in device's hello message. Can be used for devices that do not report or\nincorrectly report non-module based capabilities in their hello message",
                          "items": {
                            "type": "string"
                          }
                        },
                        "override": {
                          "type": "boolean",
                          "description": "Whether to override or merge this list of non-module based capabilities with non-module\nbased capabilities from device"
                        }
                      },
                      "description": ""
                    },
                    "netconf-node-topology:schemaless": {
                      "type": "boolean",
                      "description": ""
                    },
                    "key-based": {
                      "title": "netconf.node.topology.netconfnodecredentials.credentials.keyauth.KeyBased",
                      "type": "object",
                      "properties": {
                        "key-id": {
                          "type": "string",
                          "description": ""
                        },
                        "username": {
                          "type": "string",
                          "description": ""
                        }
                      },
                      "description": "",
                      "x-choice": "credentials:key-auth"
                    },
                    "blacklist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are not invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:bl"
                    },
                    "uniconfig-config:validation-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send validate RPC before commit RPC."
                    },
                    "whitelist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:wl"
                    },
                    "netconf-node-topology:confirm-timeout": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Timeout period to issued commit after confirmed-commit",
                      "format": "int64"
                    },
                    "uniconfig-config:sequence-read-active": {
                      "type": "boolean",
                      "description": "Forces reading of data sequentially when mounting device."
                    },
                    "netconf-node-topology:host": {
                      "type": "string",
                      "description": ""
                    },
                    "login-password-unencrypted": {
                      "title": "netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted",
                      "type": "object",
                      "properties": {
                        "password": {
                          "type": "string",
                          "description": ""
                        },
                        "username": {
                          "type": "string",
                          "description": ""
                        }
                      },
                      "description": "",
                      "x-choice": "credentials:login-pw-unencrypted"
                    },
                    "netconf-node-topology:customization-factory": {
                      "type": "string",
                      "description": ""
                    },
                    "login-password": {
                      "title": "netconf.node.topology.netconfnodecredentials.credentials.loginpw.LoginPassword",
                      "type": "object",
                      "properties": {
                        "password": {
                          "type": "string",
                          "description": ""
                        },
                        "username": {
                          "type": "string",
                          "description": ""
                        }
                      },
                      "description": "",
                      "x-choice": "credentials:login-pw"
                    },
                    "netconf-node-topology:actor-response-wait-time": {
                      "maximum": 65535,
                      "minimum": 1,
                      "type": "integer",
                      "description": "Time that slave actor will wait for response from master.",
                      "format": "int32"
                    },
                    "uniconfig-config:uniconfig-native-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "netconf-node-topology:reconnect-on-changed-schema": {
                      "type": "boolean",
                      "description": "If it is set to 'true', NETCONF notifications are supported by device, and NETCONF\nnotifications are enabled ('enabled-notifications' flag), the connector would auto\ndisconnect/reconnect when schemas are changed in the remote device. The connector subscribes\n(right after connect) to base netconf notifications and listens\nfor netconf-capability-change notification"
                    },
                    "username": {
                      "type": "string",
                      "description": "",
                      "x-choice": "credentials:login-password"
                    }
                  },
                  "description": "NETCONF node settings."
                },
                "gnmi": {
                  "title": "connection.manager.installmultiplenodes.input.nodes.Gnmi",
                  "type": "object",
                  "properties": {
                    "uniconfig-config:sequence-read-active": {
                      "type": "boolean",
                      "description": "Forces reading of data sequentially when mounting device."
                    },
                    "uniconfig-config:confirmed-commit-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
                    },
                    "uniconfig-config:crypto": {
                      "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                      "type": "object",
                      "properties": {
                        "public-key-path": {
                          "type": "string",
                          "description": "Path to leaf containing public key in Base64 binary format."
                        },
                        "public-key-cipher-type": {
                          "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                        }
                      },
                      "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
                    },
                    "blacklist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are not invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:bl"
                    },
                    "uniconfig-config:validation-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send validate RPC before commit RPC."
                    },
                    "uniconfig-config:uniconfig-native-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "uniconfig-config:install-uniconfig-node-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "whitelist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:wl"
                    }
                  },
                  "description": "gNMI node settings."
                }
              }
            }
          }
        },
        "description": ""
      },
      "connection.manager.installnode.Input": {
        "type": "object",
        "properties": {
          "node-id": {
            "type": "string",
            "description": "Node identifier of CLI/NETCONF node."
          },
          "cli": {
            "title": "connection.manager.installnode.input.Cli",
            "type": "object",
            "properties": {
              "cli-topology:device-type": {
                "type": "string",
                "description": ""
              },
              "uniconfig-config:confirmed-commit-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
              },
              "secret": {
                "type": "string",
                "description": "Privileged EXEC mode password for Cisco IOS devices. If not set credentials\npassword will be used",
                "x-choice": "privileged-mode-credentials:ios-enable-password"
              },
              "cli-topology:dry-run-journal-size": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Size of the DRY RUN cli mountpoint jounral. DRY RUN journal captures commands that would be\nexecuted when reading/writing some configuration. However the commands are not actually sent\nto the device",
                "format": "int32"
              },
              "keepalive-initial-delay": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "",
                "format": "int32",
                "x-choice": "keepalive-strategy:keepalive"
              },
              "password": {
                "type": "string",
                "description": "",
                "x-choice": "credentials:login-password"
              },
              "keepalive-timeout": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "",
                "format": "int32",
                "x-choice": "keepalive-strategy:keepalive"
              },
              "uniconfig-config:crypto": {
                "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                "type": "object",
                "properties": {
                  "public-key-path": {
                    "type": "string",
                    "description": "Path to leaf containing public key in Base64 binary format."
                  },
                  "public-key-cipher-type": {
                    "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                  }
                },
                "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
              },
              "cli-topology:max-reconnection-attempts": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "integer",
                "description": "Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.\nThis is an optional parameter. If set, max-connection-attempts will be used only once,\nfor the first connection attempts and for any subsequent disconnect-connect cycles,\nmax-reconnect-attempts will be used. This enables users using different amount of reconnects\nfor initial attempts vs subsequent reconnects.",
                "format": "int64"
              },
              "uniconfig-config:install-uniconfig-node-enabled": {
                "type": "boolean",
                "description": ""
              },
              "connection-lazy-timeout": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Maximal time (in seconds) for connection to keep alive, if no activity was detected\nin the session and the timeout has been reached, connection will be stopped",
                "format": "int32",
                "x-choice": "keepalive-strategy:lazy"
              },
              "cli-topology:device-version": {
                "type": "string",
                "description": ""
              },
              "cli-topology:max-connection-attempts": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "integer",
                "description": "Maximum number of connection attempts before connection initialization is marked as failed.\nValue 0 disables this limit.",
                "format": "int64"
              },
              "connection-establish-timeout": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Maximal time (in seconds) for connection establishment, if a connection attempt does\nnot succeed in this time, the attempt is considered a failure",
                "format": "int32",
                "x-choice": "keepalive-strategy:lazy"
              },
              "cli-topology:pass-through": {
                "title": "cli.topology.clinodeconnectionstatus.PassThrough",
                "type": "object",
                "properties": {},
                "description": "When the underlying node is connected, its cli context\nis available verbatim under this container through the\nmount extension."
              },
              "cli-topology:host": {
                "type": "string",
                "description": ""
              },
              "cli-topology:default-error-patterns": {
                "$ref": "#/components/schemas/cli.translate.registry.errorpatterns.DefaultErrorPatterns"
              },
              "cli-topology:transport-type": {
                "$ref": "#/components/schemas/cli.topology.TransportTypeEnumeration"
              },
              "blacklist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are not invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:bl"
              },
              "uniconfig-config:validation-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send validate RPC before commit RPC."
              },
              "whitelist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:wl"
              },
              "cli-topology:default-commit-error-patterns": {
                "$ref": "#/components/schemas/cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns"
              },
              "cli-topology:journal-level": {
                "$ref": "#/components/schemas/cli.topology.JournalLevel"
              },
              "uniconfig-config:sequence-read-active": {
                "type": "boolean",
                "description": "Forces reading of data sequentially when mounting device."
              },
              "keepalive-delay": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "",
                "format": "int32",
                "x-choice": "keepalive-strategy:keepalive"
              },
              "cli-topology:journal-size": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Size of the cli mountpoint jounral. Journal keeps track of executed commands and makes\nthem available for users/apps for debugging purposes. Value 0 disables journaling",
                "format": "int32"
              },
              "command-timeout": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Maximal time (in seconds) for command execution, if a command cannot be executed on\na device in this time, the execution is considered a failure",
                "format": "int32",
                "x-choice": "keepalive-strategy:lazy"
              },
              "uniconfig-config:uniconfig-native-enabled": {
                "type": "boolean",
                "description": ""
              },
              "cli-topology:port": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "",
                "format": "int32"
              },
              "cli-topology:parsing-engine": {
                "$ref": "#/components/schemas/cli.topology.ParsingEngine"
              },
              "username": {
                "type": "string",
                "description": "",
                "x-choice": "credentials:login-password"
              }
            },
            "description": "CLI node settings."
          },
          "netconf": {
            "title": "connection.manager.installnode.input.Netconf",
            "type": "object",
            "properties": {
              "netconf-node-topology:edit-config-test-option": {
                "$ref": "#/components/schemas/netconf.node.topology.EditConfigTestOptionEnumeration"
              },
              "netconf-node-topology:sleep-factor": {
                "maximum": 922337203685477600,
                "minimum": -922337203685477600,
                "type": "integer",
                "description": "",
                "format": "int32"
              },
              "netconf-node-topology:keepalive-delay": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "integer",
                "description": "Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds\nIf a value <1 is provided, no keepalives will be sent",
                "format": "int64"
              },
              "netconf-node-topology:default-request-timeout-millis": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "integer",
                "description": "Timeout for blocking operations within transactions.",
                "format": "int64"
              },
              "uniconfig-config:confirmed-commit-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
              },
              "netconf-node-topology:tcp-only": {
                "type": "boolean",
                "description": ""
              },
              "netconf-node-topology:yang-module-capabilities": {
                "title": "netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities",
                "type": "object",
                "properties": {
                  "capability": {
                    "type": "array",
                    "description": "Set a list of capabilities to override capabilities provided in device's hello message.\nCan be used for devices that do not report any yang modules in their hello message",
                    "items": {
                      "type": "string"
                    }
                  },
                  "override": {
                    "type": "boolean",
                    "description": "Whether to override or merge this list of capabilities with capabilities from device"
                  }
                },
                "description": ""
              },
              "netconf-node-topology:max-reconnection-attempts": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "integer",
                "description": "Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.\nThis is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts\nand for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.\nThis enables users using different amount of reconnects for initial attempts vs subsequent reconnects.",
                "format": "int64"
              },
              "netconf-node-topology:port": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "",
                "format": "int32"
              },
              "netconf-node-topology:yang-library": {
                "title": "netconf.node.topology.netconfschemastorage.YangLibrary",
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": ""
                  },
                  "yang-library-url": {
                    "type": "string",
                    "description": "Yang library to be plugged as additional source provider into the shared schema repository"
                  },
                  "username": {
                    "type": "string",
                    "description": ""
                  }
                },
                "description": ""
              },
              "netconf-node-topology:dry-run-journal-size": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that\nwould be executed when reading/writing some configuration. However the RPCs are not actually\nsent to the device",
                "format": "int32"
              },
              "netconf-node-topology:odl-hello-message-capabilities": {
                "title": "netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities",
                "type": "object",
                "properties": {
                  "capability": {
                    "type": "array",
                    "description": "Certain devices are non-accepting of ODL's hello message.  This allows specification of\na custom ODL hello message based on a list of supported capabilities.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": ""
              },
              "netconf-node-topology:enabled-notifications": {
                "type": "boolean",
                "description": "If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will\nexpose NETCONF notification and subscription services."
              },
              "netconf-node-topology:connection-timeout-millis": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "integer",
                "description": "Specifies timeout in milliseconds after which connection must be established.",
                "format": "int64"
              },
              "password": {
                "type": "string",
                "description": "",
                "x-choice": "credentials:login-password"
              },
              "netconf-node-topology:parent-node-id": {
                "type": "string",
                "description": "Identifier of the parent node with which the current node shares the lifecycle."
              },
              "netconf-node-topology:between-attempts-timeout-millis": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Initial timeout in milliseconds to wait between connection attempts. Will be multiplied by sleep-factor with every additional attempt",
                "format": "int32"
              },
              "netconf-node-topology:strict-parsing": {
                "type": "boolean",
                "description": "If this parameter is set to 'false', then parser should ignore unknown elements and not throw\nexception during parsing."
              },
              "uniconfig-config:crypto": {
                "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                "type": "object",
                "properties": {
                  "public-key-path": {
                    "type": "string",
                    "description": "Path to leaf containing public key in Base64 binary format."
                  },
                  "public-key-cipher-type": {
                    "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                  }
                },
                "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
              },
              "netconf-node-topology:max-connection-attempts": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "integer",
                "description": "Maximum number of connection retries. Non positive value or null is interpreted as infinity.",
                "format": "int64"
              },
              "uniconfig-config:install-uniconfig-node-enabled": {
                "type": "boolean",
                "description": ""
              },
              "netconf-node-topology:concurrent-rpc-limit": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Limit of concurrent messages that can be send before reply messages are received.\nIf value <1 is provided, no limit will be enforced",
                "format": "int32"
              },
              "netconf-node-topology:schema-cache-directory": {
                "type": "string",
                "description": "The destination schema repository for yang files relative to the cache directory.  This may be specified per netconf mount\nso that the loaded yang files are stored to a distinct directory to avoid potential conflict."
              },
              "netconf-node-topology:pass-through": {
                "title": "netconf.node.topology.netconfnodeconnectionstatus.PassThrough",
                "type": "object",
                "properties": {},
                "description": "When the underlying node is connected, its NETCONF context\nis available verbatim under this container through the\nmount extension."
              },
              "netconf-node-topology:non-module-capabilities": {
                "title": "netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities",
                "type": "object",
                "properties": {
                  "capability": {
                    "type": "array",
                    "description": "Set a list of non-module based capabilities to override or merge non-module capabilities\nprovided in device's hello message. Can be used for devices that do not report or\nincorrectly report non-module based capabilities in their hello message",
                    "items": {
                      "type": "string"
                    }
                  },
                  "override": {
                    "type": "boolean",
                    "description": "Whether to override or merge this list of non-module based capabilities with non-module\nbased capabilities from device"
                  }
                },
                "description": ""
              },
              "netconf-node-topology:schemaless": {
                "type": "boolean",
                "description": ""
              },
              "key-based": {
                "title": "netconf.node.topology.netconfnodecredentials.credentials.keyauth.KeyBased",
                "type": "object",
                "properties": {
                  "key-id": {
                    "type": "string",
                    "description": ""
                  },
                  "username": {
                    "type": "string",
                    "description": ""
                  }
                },
                "description": "",
                "x-choice": "credentials:key-auth"
              },
              "blacklist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are not invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:bl"
              },
              "uniconfig-config:validation-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send validate RPC before commit RPC."
              },
              "whitelist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:wl"
              },
              "netconf-node-topology:confirm-timeout": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "integer",
                "description": "Timeout period to issued commit after confirmed-commit",
                "format": "int64"
              },
              "uniconfig-config:sequence-read-active": {
                "type": "boolean",
                "description": "Forces reading of data sequentially when mounting device."
              },
              "netconf-node-topology:host": {
                "type": "string",
                "description": ""
              },
              "login-password-unencrypted": {
                "title": "netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted",
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": ""
                  },
                  "username": {
                    "type": "string",
                    "description": ""
                  }
                },
                "description": "",
                "x-choice": "credentials:login-pw-unencrypted"
              },
              "netconf-node-topology:customization-factory": {
                "type": "string",
                "description": ""
              },
              "login-password": {
                "title": "netconf.node.topology.netconfnodecredentials.credentials.loginpw.LoginPassword",
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": ""
                  },
                  "username": {
                    "type": "string",
                    "description": ""
                  }
                },
                "description": "",
                "x-choice": "credentials:login-pw"
              },
              "netconf-node-topology:actor-response-wait-time": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer",
                "description": "Time that slave actor will wait for response from master.",
                "format": "int32"
              },
              "uniconfig-config:uniconfig-native-enabled": {
                "type": "boolean",
                "description": ""
              },
              "netconf-node-topology:reconnect-on-changed-schema": {
                "type": "boolean",
                "description": "If it is set to 'true', NETCONF notifications are supported by device, and NETCONF\nnotifications are enabled ('enabled-notifications' flag), the connector would auto\ndisconnect/reconnect when schemas are changed in the remote device. The connector subscribes\n(right after connect) to base netconf notifications and listens\nfor netconf-capability-change notification"
              },
              "username": {
                "type": "string",
                "description": "",
                "x-choice": "credentials:login-password"
              }
            },
            "description": "NETCONF node settings."
          },
          "gnmi": {
            "title": "connection.manager.installnode.input.Gnmi",
            "type": "object",
            "properties": {
              "uniconfig-config:sequence-read-active": {
                "type": "boolean",
                "description": "Forces reading of data sequentially when mounting device."
              },
              "uniconfig-config:confirmed-commit-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
              },
              "uniconfig-config:crypto": {
                "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                "type": "object",
                "properties": {
                  "public-key-path": {
                    "type": "string",
                    "description": "Path to leaf containing public key in Base64 binary format."
                  },
                  "public-key-cipher-type": {
                    "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                  }
                },
                "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
              },
              "blacklist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are not invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:bl"
              },
              "uniconfig-config:validation-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send validate RPC before commit RPC."
              },
              "uniconfig-config:uniconfig-native-enabled": {
                "type": "boolean",
                "description": ""
              },
              "uniconfig-config:install-uniconfig-node-enabled": {
                "type": "boolean",
                "description": ""
              },
              "whitelist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:wl"
              }
            },
            "description": "gNMI node settings."
          }
        },
        "description": ""
      },
      "connection.manager.mountnode.Input": {
        "type": "object",
        "properties": {
          "node-id": {
            "type": "string",
            "description": "Node identifier of CLI/NETCONF node."
          },
          "max-connection-attempts": {
            "maximum": 4294967295,
            "minimum": 0,
            "type": "integer",
            "description": "Maximum number of connection attempts in southbound layer, before mounting process fails.\nValue of this field doesn't override value from the mount request - it is used only as\na default value.",
            "format": "int64"
          },
          "connection-type": {
            "$ref": "#/components/schemas/connection.manager.ConnectionType"
          }
        },
        "description": ""
      },
      "connection.manager.uninstallmultiplenodes.Input": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "description": "",
            "items": {
              "title": "connection.manager.uninstallmultiplenodesinputfields.Nodes",
              "type": "object",
              "properties": {
                "node-id": {
                  "type": "string",
                  "description": "Node identifier of CLI/NETCONF node."
                },
                "connection-type": {
                  "$ref": "#/components/schemas/connection.manager.ConnectionType"
                }
              }
            }
          }
        },
        "description": ""
      },
      "connection.manager.uninstallnode.Input": {
        "type": "object",
        "properties": {
          "node-id": {
            "type": "string",
            "description": "Node identifier of CLI/NETCONF node."
          },
          "connection-type": {
            "$ref": "#/components/schemas/connection.manager.ConnectionType"
          }
        },
        "description": ""
      },
      "connection.manager.unmountnode.Input": {
        "type": "object",
        "properties": {
          "node-id": {
            "type": "string",
            "description": "Node identifier of CLI/NETCONF node."
          },
          "connection-type": {
            "$ref": "#/components/schemas/connection.manager.ConnectionType"
          }
        },
        "description": ""
      },
      "device.discovery.Discover": {
        "type": "object",
        "properties": {
          "output": {
            "title": "device.discovery.discover.Output",
            "type": "object",
            "properties": {
              "device": {
                "type": "array",
                "description": "",
                "items": {
                  "title": "device.discovery.discoveryoutputfields.Device",
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "string",
                      "description": "Host address either in IP (IPv4 or IPv6) format or in domain-name format"
                    },
                    "is-host-reachable": {
                      "type": "boolean",
                      "description": "If the host is reachable or not using ICMP protocol"
                    },
                    "available-tcp-ports": {
                      "type": "array",
                      "description": "All the available TCP ports",
                      "items": {
                        "maximum": 65535,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "available-udp-ports": {
                      "type": "array",
                      "description": "All the available UDP ports",
                      "items": {
                        "maximum": 65535,
                        "minimum": 0,
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "description": "RPC used for verification of reachability of network devices.\nThe user can check a single IP address, in both IPv4 and IPv6\nformats, a network or a range of addresses. The ICMP protocol\nis used to check the availability of the device. The user can\nalso specify a specific port (TCP or UDP) or a range of ports\nwhich are checked if they are open."
      },
      "device.discovery.discover.Input": {
        "type": "object",
        "properties": {
          "verify-host-reachability": {
            "type": "boolean",
            "description": "Check whether the host is reachable or not using ICMP protocol"
          },
          "address": {
            "type": "array",
            "description": "",
            "items": {
              "title": "device.discovery.inputaddress.Address",
              "type": "object",
              "properties": {
                "end-ipv6-address": {
                  "type": "string",
                  "description": "",
                  "x-choice": "type-of-address:ipv6-range-case"
                },
                "ip-address": {
                  "type": "string",
                  "description": "IP address in either IPv4 or IPv6 format, the syntax\nthen determines which version is used",
                  "x-choice": "type-of-address:ip-address-case"
                },
                "hostname": {
                  "type": "string",
                  "description": "Domain name",
                  "x-choice": "type-of-address:hostname-case"
                },
                "end-ipv4-address": {
                  "type": "string",
                  "description": "",
                  "x-choice": "type-of-address:ipv4-range-case"
                },
                "start-ipv4-address": {
                  "type": "string",
                  "description": "",
                  "x-choice": "type-of-address:ipv4-range-case"
                },
                "start-ipv6-address": {
                  "type": "string",
                  "description": "",
                  "x-choice": "type-of-address:ipv6-range-case"
                },
                "network": {
                  "type": "string",
                  "description": "IP address with a subnet mask either in IPv4 or IPv6 format,\nthe syntax then determines which version is used",
                  "x-choice": "type-of-address:network-case"
                }
              }
            }
          },
          "tcp-port": {
            "type": "array",
            "description": "",
            "items": {
              "title": "device.discovery.inputport.TcpPort",
              "type": "object",
              "properties": {
                "end-port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:port-range-case"
                },
                "port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:scalar-case"
                },
                "start-port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:port-range-case"
                }
              }
            }
          },
          "udp-port": {
            "type": "array",
            "description": "",
            "items": {
              "title": "device.discovery.inputport.UdpPort",
              "type": "object",
              "properties": {
                "end-port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:port-range-case"
                },
                "port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:scalar-case"
                },
                "start-port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:port-range-case"
                }
              }
            }
          }
        },
        "description": ""
      },
      "dryrun.manager.DryrunCommit": {
        "type": "object",
        "properties": {
          "output": {
            "title": "dryrun.manager.dryruncommit.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "uniconfig.manager.commitoutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Result of configuration and rollback on the given node.\nRollback status is empty if rollback was not executed.",
                    "items": {
                      "title": "uniconfig.manager.nodeconfigresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "configuration-status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        },
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "configuration": {
                          "type": "string",
                          "description": "Cli commands or netconf RPCs that needs to be executed\non node to reach intended configuration state"
                        },
                        "rollback-status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        }
                      }
                    }
                  }
                },
                "description": "Result of configuration and rollback on each configured network element."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Simulates configuration of network elements based on\ndiff between actual configuration and intended configuration.\nCli commands are written into dryrun-journal instead of actual\ndevice. Return value represent cli commands for all nodes\nthat have configuration pending."
      },
      "dryrun.manager.dryruncommit.Input": {
        "type": "object",
        "properties": {
          "do-rollback": {
            "type": "boolean",
            "description": "Controls whether to roll back successfully configured devices in case of failure.\nApplies when configuring multiple devices within a single COMMIT RPC.\nBy default, if N devices succeed, but the N+1 device fails,\nthose N devices will be rolled back unless this option is set to false.\nThe N+1 device will always be rolled back regardless of this option."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "frinx.types.ErrorType": {
        "type": "string",
        "enum": [
          "no-connection",
          "device-processing-error",
          "uniconfig-error",
          "cli-error",
          "netconf-error"
        ]
      },
      "frinx.types.OperationResultType": {
        "type": "string",
        "enum": [
          "complete",
          "fail"
        ]
      },
      "journal.ClearJournal": {
        "type": "object",
        "properties": {
          "output": {
            "title": "journal.clearjournal.Output",
            "type": "object",
            "properties": {
              "journal": {
                "type": "string",
                "description": ""
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "journal.ReadJournal": {
        "type": "object",
        "properties": {
          "output": {
            "title": "journal.readjournal.Output",
            "type": "object",
            "properties": {
              "journal": {
                "type": "string",
                "description": ""
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "logging.DisableDefaultDeviceLogging": {
        "type": "object",
        "properties": {
          "output": {
            "title": "logging.disabledefaultdevicelogging.Output",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Information message about state of operation."
              },
              "status": {
                "$ref": "#/components/schemas/logging.RpcStatus"
              }
            },
            "description": ""
          }
        },
        "description": "Disable logging for all devices by default."
      },
      "logging.DisableDeviceLogging": {
        "type": "object",
        "properties": {
          "output": {
            "title": "logging.disabledevicelogging.Output",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Information message about state of operation."
              },
              "status": {
                "$ref": "#/components/schemas/logging.RpcStatus"
              }
            },
            "description": ""
          }
        },
        "description": "Disable logging for specific device."
      },
      "logging.DisableLogging": {
        "type": "object",
        "properties": {
          "output": {
            "title": "logging.disablelogging.Output",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Information message about state of operation."
              },
              "status": {
                "$ref": "#/components/schemas/logging.RpcStatus"
              }
            },
            "description": ""
          }
        },
        "description": "Disable logging in specified logging broker."
      },
      "logging.EnableDefaultDeviceLogging": {
        "type": "object",
        "properties": {
          "output": {
            "title": "logging.enabledefaultdevicelogging.Output",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Information message about state of operation."
              },
              "status": {
                "$ref": "#/components/schemas/logging.RpcStatus"
              }
            },
            "description": ""
          }
        },
        "description": "Enable logging for all devices by default."
      },
      "logging.EnableDeviceLogging": {
        "type": "object",
        "properties": {
          "output": {
            "title": "logging.enabledevicelogging.Output",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Information message about state of operation."
              },
              "status": {
                "$ref": "#/components/schemas/logging.RpcStatus"
              }
            },
            "description": ""
          }
        },
        "description": "Enable logging for specific device."
      },
      "logging.EnableLogging": {
        "type": "object",
        "properties": {
          "output": {
            "title": "logging.enablelogging.Output",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Information message about state of operation."
              },
              "status": {
                "$ref": "#/components/schemas/logging.RpcStatus"
              }
            },
            "description": ""
          }
        },
        "description": "Enable logging in specified logging broker."
      },
      "logging.RpcStatus": {
        "type": "string",
        "enum": [
          "complete",
          "failed"
        ]
      },
      "logging.SetGlobalHiddenTypes": {
        "type": "object",
        "properties": {
          "output": {
            "title": "logging.setglobalhiddentypes.Output",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Information message about state of operation."
              },
              "status": {
                "$ref": "#/components/schemas/logging.RpcStatus"
              }
            },
            "description": ""
          }
        },
        "description": "Set types which will be masked in output using asterisk."
      },
      "logging.disabledefaultdevicelogging.Input": {
        "type": "object",
        "properties": {
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.disabledevicelogging.Input": {
        "type": "object",
        "properties": {
          "device-list": {
            "type": "array",
            "description": "List of devices.",
            "items": {
              "type": "string"
            }
          },
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.disablelogging.Input": {
        "type": "object",
        "properties": {
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.enabledefaultdevicelogging.Input": {
        "type": "object",
        "properties": {
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.enabledevicelogging.Input": {
        "type": "object",
        "properties": {
          "device-list": {
            "type": "array",
            "description": "List of devices.",
            "items": {
              "type": "string"
            }
          },
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.enablelogging.Input": {
        "type": "object",
        "properties": {
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.setglobalhiddentypes.Input": {
        "type": "object",
        "properties": {
          "hidden-types": {
            "type": "array",
            "description": "Types filtered and hidden at logger ouptut.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "netconf.keystore.addkeystoreentry.Input": {
        "type": "object",
        "properties": {
          "key-credential": {
            "type": "array",
            "description": "",
            "items": {
              "title": "netconf.keystore.keystoreentry.KeyCredential",
              "type": "object",
              "properties": {
                "passphrase": {
                  "type": "string",
                  "description": "If the provided key is encrypted by a passphrase this needs to be included. Leave empty\nif the key does not have a passphrase.\nDO NOT write write this directly into the datastore, use the provided rpc's as these will\nencrypt the passhprase before the entry is written into the datastore."
                },
                "key-id": {
                  "type": "string",
                  "description": ""
                },
                "private-key": {
                  "type": "string",
                  "description": "Base64 encoded private key that should be used for authentication with a netconf device.\nDo not include a public key as that is calculated from the private key.\nDO NOT write this directly into the datastore, use the provided rpc's as these will\nencrypt the key before the entry is written into the datastore."
                }
              }
            }
          }
        },
        "description": ""
      },
      "netconf.keystore.addprivatekey.Input": {
        "type": "object",
        "properties": {
          "private-key": {
            "type": "array",
            "description": "A private key.",
            "items": {
              "title": "netconf.keystore.privatekeys.PrivateKey",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": ""
                },
                "data": {
                  "type": "string",
                  "description": "Base64 encoded private key."
                },
                "certificate-chain": {
                  "type": "array",
                  "description": "A certificate chain for this public key. Each certificate is an X.509 v3 certificate\nstructure as specified by RFC5280, encoded using the Base64 format.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "description": ""
      },
      "netconf.keystore.addtrustedcertificate.Input": {
        "type": "object",
        "properties": {
          "trusted-certificate": {
            "type": "array",
            "description": "A list of trusted certificate. These cerfitifcates can be used by a server to\nauthenticate clients, or by clients to authenticate servers.",
            "items": {
              "title": "netconf.keystore.trustedcertificates.TrustedCertificate",
              "type": "object",
              "properties": {
                "certificate": {
                  "type": "string",
                  "description": "An X.509 v3 certificate structure as specified by RFC5280, encoded using\nthe Base64 format."
                },
                "name": {
                  "type": "string",
                  "description": ""
                }
              }
            }
          }
        },
        "description": ""
      },
      "netconf.keystore.removekeystoreentry.Input": {
        "type": "object",
        "properties": {
          "key-id": {
            "type": "array",
            "description": "",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "netconf.keystore.removeprivatekey.Input": {
        "type": "object",
        "properties": {
          "name": {
            "type": "array",
            "description": "",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "netconf.keystore.removetrustedcertificate.Input": {
        "type": "object",
        "properties": {
          "name": {
            "type": "array",
            "description": "",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "netconf.node.topology.EditConfigTestOptionEnumeration": {
        "type": "string",
        "enum": [
          "set",
          "test-only",
          "test-then-set"
        ]
      },
      "notifications.createsubscription.Input": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "description": "An optional parameter that indicates which subset of all\npossible events is of interest. The format of this\nparameter is the same as that of the filter parameter\nin the NETCONF protocol operations. If not present,\nall events not precluded by other parameters will\nbe sent."
          },
          "stopTime": {
            "type": "string",
            "description": "An optional parameter used with the optional replay\nfeature to indicate the newest notifications of\ninterest. If stop time is not present, the notifications\nwill continue until the subscription is terminated.\nMust be used with startTime."
          },
          "startTime": {
            "type": "string",
            "description": "A parameter used to trigger the replay feature and\nindicates that the replay should start at the time\nspecified. If start time is not present, this is not a\nreplay subscription."
          },
          "stream": {
            "type": "string",
            "description": "An optional parameter that indicates which stream of events\nis of interest. If not present, then events in the default\nNETCONF stream will be sent."
          }
        },
        "description": ""
      },
      "restconf.logging.HttpMethod": {
        "type": "string",
        "enum": [
          "GET",
          "HEAD",
          "POST",
          "PUT",
          "DELETE",
          "TRACE",
          "OPTIONS",
          "CONNECT",
          "PATCH"
        ]
      },
      "restconf.logging.SetHiddenHttpHeaders": {
        "type": "object",
        "properties": {
          "output": {
            "title": "restconf.logging.sethiddenhttpheaders.Output",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Information message about state of operation."
              },
              "status": {
                "$ref": "#/components/schemas/logging.RpcStatus"
              }
            },
            "description": ""
          }
        },
        "description": "Set hidden HTTP headers which content is hidden in the RESTCONF audit logs."
      },
      "restconf.logging.SetHiddenHttpMethods": {
        "type": "object",
        "properties": {
          "output": {
            "title": "restconf.logging.sethiddenhttpmethods.Output",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Information message about state of operation."
              },
              "status": {
                "$ref": "#/components/schemas/logging.RpcStatus"
              }
            },
            "description": ""
          }
        },
        "description": "Set hidden HTTP methods that are not logged into RESTCONF audit logs."
      },
      "restconf.logging.sethiddenhttpheaders.Input": {
        "type": "object",
        "properties": {
          "hidden-http-headers": {
            "type": "array",
            "description": "List of HTTP headers (names of the headers) which content is hidden in the logs.\nNames of the HTTP headers are not case-sensitive.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "restconf.logging.sethiddenhttpmethods.Input": {
        "type": "object",
        "properties": {
          "hidden-http-methods": {
            "type": "array",
            "description": "HTTP requests (and associated HTTP responses) are not logged if request's HTTP method is set\nto one of the methods in this list.",
            "items": {
              "$ref": "#/components/schemas/restconf.logging.HttpMethod"
            }
          }
        },
        "description": ""
      },
      "schema.resources.RegisterRepository": {
        "type": "object",
        "properties": {
          "output": {
            "title": "schema.resources.registerrepository.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "The cause of the failure."
              },
              "status": {
                "$ref": "#/components/schemas/schema.resources.RepositoryCreationStatus"
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "schema.resources.RepositoryCreationStatus": {
        "type": "string",
        "enum": [
          "success",
          "failed"
        ]
      },
      "schema.resources.registerrepository.Input": {
        "type": "object",
        "properties": {
          "repository-name": {
            "type": "string",
            "description": "Name of the schema repository / directory that is used for persistence of YANG artifacts."
          }
        },
        "description": ""
      },
      "snapshot.manager.CreateSnapshot": {
        "type": "object",
        "properties": {
          "output": {
            "title": "snapshot.manager.createsnapshot.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "snapshot.manager.createsnapshotoutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Result of create-snapshot on actual uniconfig node.",
                    "items": {
                      "title": "snapshot.manager.nodecreatesnapshotresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        }
                      }
                    }
                  }
                },
                "description": "Individual result of given nodes."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Creates new network-topology with the given name\nas a snapshot of actual uniconfig topology."
      },
      "snapshot.manager.DeleteSnapshot": {
        "type": "object",
        "properties": {
          "output": {
            "title": "snapshot.manager.deletesnapshot.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Deletes existing network-topology with the given name\nas a snapshot."
      },
      "snapshot.manager.ReplaceConfigWithSnapshot": {
        "type": "object",
        "properties": {
          "output": {
            "title": "snapshot.manager.replaceconfigwithsnapshot.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "uniconfig.manager.replaceconfigwithoperationaloutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Result of replace-config-with-operational on actual uniconfig node.",
                    "items": {
                      "title": "uniconfig.manager.nodereplaceconfigwithoperationalresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        }
                      }
                    }
                  }
                },
                "description": "Individual result of replace-config-with-operational or replace-config-with-snapshot\nfor given nodes."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Replaces intended uniconfig topology with a snapshot."
      },
      "snapshot.manager.SnapshotsMetadata": {
        "type": "object",
        "properties": {
          "snapshot": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
            }
          }
        },
        "description": ""
      },
      "snapshot.manager.createsnapshot.Input": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of snapshot."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "snapshot.manager.deletesnapshot.Input": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of snapshot."
          }
        },
        "description": ""
      },
      "snapshot.manager.replaceconfigwithsnapshot.Input": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of snapshot."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "snapshot.manager.snapshotsmetadata.Snapshot": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of snapshot."
          },
          "nodes": {
            "type": "array",
            "description": "List of nodes that are part of the snapshot.",
            "items": {
              "type": "string"
            }
          },
          "creation-time": {
            "type": "string",
            "description": "Time when the snapshot was created"
          }
        },
        "description": ""
      },
      "subtree.manager.CalculateSubtreeDiff": {
        "type": "object",
        "properties": {
          "output": {
            "title": "subtree.manager.calculatesubtreediff.Output",
            "type": "object",
            "properties": {
              "created-data": {
                "type": "array",
                "description": "Created intended configuration against actual.",
                "items": {
                  "title": "subtree.manager.createddata.CreatedData",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": ""
                    },
                    "path": {
                      "type": "string",
                      "description": "Instance-identifier of created data node."
                    }
                  }
                }
              },
              "error-message": {
                "type": "string",
                "description": "Error message describing cause of error."
              },
              "updated-data": {
                "type": "array",
                "description": "Updated intended configuration against actual.",
                "items": {
                  "title": "subtree.manager.updateddata.UpdatedData",
                  "type": "object",
                  "properties": {
                    "path-actual": {
                      "type": "string",
                      "description": "Instance-identifier of updated data node."
                    },
                    "path-intended": {
                      "type": "string",
                      "description": "Instance-identifier of updated data node."
                    },
                    "data-intended": {
                      "type": "string",
                      "description": ""
                    },
                    "data-actual": {
                      "type": "string",
                      "description": ""
                    }
                  }
                }
              },
              "source-path": {
                "type": "string",
                "description": "Source path to data which is put/merged under target nodes."
              },
              "deleted-data": {
                "type": "array",
                "description": "Removed intended configuration against actual.",
                "items": {
                  "title": "subtree.manager.deleteddata.DeletedData",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": ""
                    },
                    "path": {
                      "type": "string",
                      "description": "Instance-identifier of deleted data node."
                    }
                  }
                }
              },
              "error-type": {
                "$ref": "#/components/schemas/frinx.types.ErrorType"
              },
              "target-path": {
                "type": "string",
                "description": "Target path under which data from source paths is put/merged."
              },
              "status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Calculate diff between two YIID paths."
      },
      "subtree.manager.CalculateSubtreeGitLikeDiff": {
        "type": "object",
        "properties": {
          "output": {
            "title": "subtree.manager.calculatesubtreegitlikediff.Output",
            "type": "object",
            "properties": {
              "changes": {
                "type": "array",
                "description": "Result of diff between source and target YIID paths in a git like style.",
                "items": {
                  "title": "subtree.manager.subtreegitlikediffoutput.Changes",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string",
                      "description": "Result of the changes in a git like style."
                    },
                    "target-path": {
                      "type": "string",
                      "description": "Instance-identifier of updated data node showing the relative path."
                    },
                    "source-path": {
                      "type": "string",
                      "description": "Instance-identifier of updated data node showing the relative path."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              },
              "error-type": {
                "$ref": "#/components/schemas/frinx.types.ErrorType"
              },
              "error-message": {
                "type": "string",
                "description": "Error message describing cause of error."
              },
              "status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Calculate diff between two YIID paths in a git like style."
      },
      "subtree.manager.CopyManyToOne": {
        "type": "object",
        "properties": {
          "output": {
            "title": "subtree.manager.copymanytoone.Output",
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              },
              "error-message": {
                "type": "string",
                "description": "Error message describing operation failure."
              }
            },
            "description": ""
          }
        },
        "description": "Merge or replace config between subtrees."
      },
      "subtree.manager.CopyOneToMany": {
        "type": "object",
        "properties": {
          "output": {
            "title": "subtree.manager.copyonetomany.Output",
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              },
              "error-message": {
                "type": "string",
                "description": "Error message describing operation failure."
              }
            },
            "description": ""
          }
        },
        "description": "Merge or replace config between subtrees."
      },
      "subtree.manager.CopyOneToOne": {
        "type": "object",
        "properties": {
          "output": {
            "title": "subtree.manager.copyonetoone.Output",
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              },
              "error-message": {
                "type": "string",
                "description": "Error message describing operation failure."
              }
            },
            "description": ""
          }
        },
        "description": "Merge or replace config between subtrees."
      },
      "subtree.manager.Datastore": {
        "type": "string",
        "enum": [
          "CONFIGURATION",
          "OPERATIONAL"
        ]
      },
      "subtree.manager.Operation": {
        "type": "string",
        "enum": [
          "merge",
          "replace"
        ]
      },
      "subtree.manager.SourceDatastore": {
        "type": "string",
        "enum": [
          "CONFIGURATION",
          "OPERATIONAL"
        ]
      },
      "subtree.manager.TargetDatastore": {
        "type": "string",
        "enum": [
          "CONFIGURATION",
          "OPERATIONAL"
        ]
      },
      "subtree.manager.calculatesubtreediff.Input": {
        "type": "object",
        "properties": {
          "source-datastore": {
            "$ref": "#/components/schemas/subtree.manager.SourceDatastore"
          },
          "target-datastore": {
            "$ref": "#/components/schemas/subtree.manager.TargetDatastore"
          },
          "target-path": {
            "type": "string",
            "description": "Target path YIID."
          },
          "source-path": {
            "type": "string",
            "description": "Source path YIID."
          }
        },
        "description": ""
      },
      "subtree.manager.calculatesubtreegitlikediff.Input": {
        "type": "object",
        "properties": {
          "source-datastore": {
            "$ref": "#/components/schemas/subtree.manager.SourceDatastore"
          },
          "target-datastore": {
            "$ref": "#/components/schemas/subtree.manager.TargetDatastore"
          },
          "target-path": {
            "type": "string",
            "description": "Target path YIID."
          },
          "source-path": {
            "type": "string",
            "description": "Source path YIID."
          }
        },
        "description": ""
      },
      "subtree.manager.copymanytoone.Input": {
        "type": "object",
        "properties": {
          "source-paths": {
            "type": "array",
            "description": "Source paths to data which is put/merged under target nodes.",
            "items": {
              "type": "string"
            }
          },
          "source-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "target-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "target-path": {
            "type": "string",
            "description": "Target path under which data from source paths is put/merged."
          },
          "operation": {
            "$ref": "#/components/schemas/subtree.manager.Operation"
          }
        },
        "description": ""
      },
      "subtree.manager.copyonetomany.Input": {
        "type": "object",
        "properties": {
          "source-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "target-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "operation": {
            "$ref": "#/components/schemas/subtree.manager.Operation"
          },
          "target-paths": {
            "type": "array",
            "description": "Target paths under which data from source paths is put/merged.",
            "items": {
              "type": "string"
            }
          },
          "source-path": {
            "type": "string",
            "description": "Source path to data which is put/merged under target nodes."
          }
        },
        "description": ""
      },
      "subtree.manager.copyonetoone.Input": {
        "type": "object",
        "properties": {
          "source-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "target-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "target-path": {
            "type": "string",
            "description": "Target path under which data from source paths is put/merged."
          },
          "operation": {
            "$ref": "#/components/schemas/subtree.manager.Operation"
          },
          "source-path": {
            "type": "string",
            "description": "Source path to data which is put/merged under target nodes."
          }
        },
        "description": ""
      },
      "template.manager.ApplyTemplate": {
        "type": "object",
        "properties": {
          "output": {
            "title": "template.manager.applytemplate.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-result": {
                "type": "array",
                "description": "RPC results per target Uniconfig node to which template is applied.",
                "items": {
                  "title": "template.manager.applytemplateoutputfields.NodeResult",
                  "type": "object",
                  "properties": {
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "RPC used for application of single template into one or multiple Uniconfig nodes."
      },
      "template.manager.GetTemplateInfo": {
        "type": "object",
        "properties": {
          "output": {
            "title": "template.manager.gettemplateinfo.Output",
            "type": "object",
            "properties": {
              "variables": {
                "title": "template.manager.gettemplateinfooutputfields.Variables",
                "type": "object",
                "properties": {
                  "variable": {
                    "type": "array",
                    "description": "",
                    "items": {
                      "title": "template.manager.gettemplateinfooutputfields.variables.Variable",
                      "type": "object",
                      "properties": {
                        "base-types": {
                          "title": "template.manager.gettemplateinfooutputfields.variables.variable.BaseTypes",
                          "type": "object",
                          "properties": {
                            "base-type": {
                              "type": "array",
                              "description": "",
                              "items": {
                                "title": "template.manager.gettemplateinfooutputfields.variables.variable.basetypes.BaseType",
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": ""
                                  },
                                  "constraints": {
                                    "type": "array",
                                    "description": "",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "description": ""
                        },
                        "variable-name": {
                          "type": "string",
                          "description": ""
                        },
                        "type": {
                          "type": "string",
                          "description": ""
                        },
                        "paths": {
                          "title": "template.manager.gettemplateinfooutputfields.variables.variable.Paths",
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "array",
                              "description": "",
                              "items": {
                                "title": "template.manager.gettemplateinfooutputfields.variables.variable.paths.Path",
                                "type": "object",
                                "properties": {
                                  "path": {
                                    "type": "string",
                                    "description": ""
                                  },
                                  "path-description": {
                                    "type": "string",
                                    "description": ""
                                  },
                                  "default-value": {
                                    "type": "string",
                                    "description": ""
                                  }
                                }
                              }
                            }
                          },
                          "description": ""
                        },
                        "type-description": {
                          "type": "string",
                          "description": ""
                        }
                      }
                    }
                  }
                },
                "description": ""
              }
            },
            "description": ""
          }
        },
        "description": "RPC used for retrieval of information about an existing template including list of variables"
      },
      "template.manager.applytemplate.Input": {
        "type": "object",
        "properties": {
          "template-node-id": {
            "type": "string",
            "description": "Identifier of the template."
          },
          "uniconfig-node": {
            "type": "array",
            "description": "",
            "items": {
              "title": "template.manager.applytemplateinputfields.UniconfigNode",
              "type": "object",
              "properties": {
                "uniconfig-node-id": {
                  "type": "string",
                  "description": "Identifier of the target Uniconfig node."
                },
                "variable": {
                  "type": "array",
                  "description": "List of variables with associated values.",
                  "items": {
                    "title": "template.manager.applytemplateinputfields.uniconfignode.Variable",
                    "type": "object",
                    "properties": {
                      "leaf-list-values": {
                        "type": "array",
                        "description": "List of values that can be applied to the leaf-list.",
                        "items": {
                          "type": "string"
                        },
                        "x-choice": "type:leaf-list-values"
                      },
                      "typed-leaf-values": {
                        "type": "array",
                        "description": "",
                        "items": {
                          "title": "template.manager.applytemplateinputfields.uniconfignode.variable.type.typedleafvalues.TypedLeafValues",
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Type qualifier for this value.\nUsed in case the same variable is used under different types"
                            },
                            "leaf-value": {
                              "type": "string",
                              "description": "Value that can be applied to leaf.",
                              "x-choice": "value:typed-leaf-value"
                            },
                            "leaf-list-values": {
                              "type": "array",
                              "description": "List of values that can be applied to the leaf-list.",
                              "items": {
                                "type": "string"
                              },
                              "x-choice": "value:typed-leaf-list-values"
                            }
                          }
                        },
                        "x-choice": "type:typed-leaf-values"
                      },
                      "leaf-value": {
                        "type": "string",
                        "description": "Value that can be applied to leaf.",
                        "x-choice": "type:leaf-value"
                      },
                      "variable-id": {
                        "type": "string",
                        "description": "Variable identifier."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": ""
      },
      "template.manager.gettemplateinfo.Input": {
        "type": "object",
        "properties": {
          "template-node-id": {
            "type": "string",
            "description": "Identifier of the template."
          }
        },
        "description": ""
      },
      "transaction.log.RevertChanges": {
        "type": "object",
        "properties": {
          "output": {
            "title": "transaction.log.revertchanges.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "revert-output": {
                "title": "transaction.log.revertoutputfields.RevertOutput",
                "type": "object",
                "properties": {
                  "result": {
                    "type": "array",
                    "description": "Result of reverted changes.",
                    "items": {
                      "title": "transaction.log.revertresults.Result",
                      "type": "object",
                      "properties": {
                        "transaction-id": {
                          "type": "string",
                          "description": "Transaction identifier."
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        }
                      }
                    }
                  }
                },
                "description": "Results of reverted changes."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Revert changes by their uuid."
      },
      "transaction.log.revertchanges.Input": {
        "type": "object",
        "properties": {
          "ignore-non-existing-nodes": {
            "type": "boolean",
            "description": "Controls whether to ignore non-existing target uniconfig nodes. By default, if the\ntarget-uuids-fields contains a transaction id for a non-existing node, then RPC fails."
          },
          "target-transactions": {
            "title": "transaction.log.targetuuidsfields.TargetTransactions",
            "type": "object",
            "properties": {
              "transaction": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.config.PublicKeyCipherType": {
        "type": "string",
        "enum": [
          "RSA",
          "CURVE25519",
          "ECDSA"
        ]
      },
      "uniconfig.manager.CalculateDiff": {
        "type": "object",
        "properties": {
          "output": {
            "title": "uniconfig.manager.calculatediff.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "uniconfig.manager.calculatediffoutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Differences between intended and actual uniconfig node.",
                    "items": {
                      "title": "uniconfig.manager.nodecalculatediffresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "created-data": {
                          "type": "array",
                          "description": "Created intended configuration against actual.",
                          "items": {
                            "title": "uniconfig.manager.nodecalculatediffresults.noderesult.CreatedData",
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "string",
                                "description": ""
                              },
                              "path": {
                                "type": "string",
                                "description": "Instance-identifier of created data node."
                              }
                            }
                          }
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "updated-data": {
                          "type": "array",
                          "description": "Updated intended configuration against actual.",
                          "items": {
                            "title": "uniconfig.manager.nodecalculatediffresults.noderesult.UpdatedData",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "Instance-identifier of updated data node."
                              },
                              "data-intended": {
                                "type": "string",
                                "description": ""
                              },
                              "data-actual": {
                                "type": "string",
                                "description": ""
                              }
                            }
                          }
                        },
                        "deleted-data": {
                          "type": "array",
                          "description": "Removed intended configuration against actual.",
                          "items": {
                            "title": "uniconfig.manager.nodecalculatediffresults.noderesult.DeletedData",
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "string",
                                "description": ""
                              },
                              "path": {
                                "type": "string",
                                "description": "Instance-identifier of deleted data node."
                              }
                            }
                          }
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        },
                        "status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        },
                        "reordered-lists": {
                          "type": "array",
                          "description": "Reordered intended list against actual.",
                          "items": {
                            "title": "uniconfig.manager.nodecalculatediffresults.noderesult.ReorderedLists",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "Instance-identifier of reordered list."
                              },
                              "intended-list-keys": {
                                "type": "string",
                                "description": ""
                              },
                              "actual-list-keys": {
                                "type": "string",
                                "description": ""
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Individual result of calculate-diff for given nodes."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Calculates differences between intended and actual uniconfig topology."
      },
      "uniconfig.manager.CalculateGitLikeDiff": {
        "type": "object",
        "properties": {
          "output": {
            "title": "uniconfig.manager.calculategitlikediff.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "uniconfig.manager.calculategitlikediffoutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Differences between intended and actual uniconfig node in a git like style.",
                    "items": {
                      "title": "uniconfig.manager.nodecalculategitlikediffresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "changes": {
                          "type": "array",
                          "description": "All changes that happened between intended and actual uniconfig node",
                          "items": {
                            "title": "uniconfig.manager.nodechanges.Changes",
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "string",
                                "description": "Changes on the specified path in a git like style."
                              },
                              "path": {
                                "type": "string",
                                "description": "Instance-identifier of updated data node."
                              }
                            }
                          }
                        },
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        }
                      }
                    }
                  }
                },
                "description": "Individual result of calculate-diff for given nodes."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Calculates differences between intended and actual uniconfig topology and returns\na git like difference between those two."
      },
      "uniconfig.manager.CheckedCommit": {
        "type": "object",
        "properties": {
          "output": {
            "title": "uniconfig.manager.checkedcommit.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "uniconfig.manager.commitoutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Result of configuration and rollback on the given node.\nRollback status is empty if rollback was not executed.",
                    "items": {
                      "title": "uniconfig.manager.nodeconfigresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "configuration-status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        },
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "configuration": {
                          "type": "string",
                          "description": "Cli commands or netconf RPCs that needs to be executed\non node to reach intended configuration state"
                        },
                        "rollback-status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        }
                      }
                    }
                  }
                },
                "description": "Result of configuration and rollback on each configured network element."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Executes configuration of network elements based on\ndiff between actual configuration and intended configuration.\nBefore execution a fingerprint check is executed. If an error occurs,\nautomatic rollback is executed. Result of execution\nis returned in RPC output."
      },
      "uniconfig.manager.Commit": {
        "type": "object",
        "properties": {
          "output": {
            "title": "uniconfig.manager.commit.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "uniconfig.manager.commitoutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Result of configuration and rollback on the given node.\nRollback status is empty if rollback was not executed.",
                    "items": {
                      "title": "uniconfig.manager.nodeconfigresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "configuration-status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        },
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "configuration": {
                          "type": "string",
                          "description": "Cli commands or netconf RPCs that needs to be executed\non node to reach intended configuration state"
                        },
                        "rollback-status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        }
                      }
                    }
                  }
                },
                "description": "Result of configuration and rollback on each configured network element."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Executes configuration of network elements based on\ndiff between actual configuration and intended configuration.\nIf an error occurs, automatic rollback is executed. Result of execution\nis returned in RPC output."
      },
      "uniconfig.manager.Health": {
        "type": "object",
        "properties": {
          "output": {
            "title": "uniconfig.manager.health.Output",
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": ""
              },
              "healthy": {
                "type": "boolean",
                "description": ""
              }
            },
            "description": ""
          }
        },
        "description": "Check if uniconfig is running. If DB persistance is enabled, check DB connection too."
      },
      "uniconfig.manager.IsInSync": {
        "type": "object",
        "properties": {
          "output": {
            "title": "uniconfig.manager.isinsync.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "uniconfig.manager.isinsyncoutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Result of is-in-sync operation on the given node.",
                    "items": {
                      "title": "uniconfig.manager.nodeisinsyncresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "is-in-sync": {
                          "type": "boolean",
                          "description": ""
                        },
                        "status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        }
                      }
                    }
                  }
                },
                "description": "Result of checking if network elements are in-sync with operational datastore."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Checks whether information in the operational datastore is in-sync with the state on the device."
      },
      "uniconfig.manager.ProtocolEnumeration": {
        "type": "string",
        "enum": [
          "cli",
          "netconf"
        ]
      },
      "uniconfig.manager.ReplaceConfigWithOperational": {
        "type": "object",
        "properties": {
          "output": {
            "title": "uniconfig.manager.replaceconfigwithoperational.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "uniconfig.manager.replaceconfigwithoperationaloutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Result of replace-config-with-operational on actual uniconfig node.",
                    "items": {
                      "title": "uniconfig.manager.nodereplaceconfigwithoperationalresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        }
                      }
                    }
                  }
                },
                "description": "Individual result of replace-config-with-operational or replace-config-with-snapshot\nfor given nodes."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Replaces intended uniconfig topology with actual uniconfig topology."
      },
      "uniconfig.manager.ShowConnectionStatus": {
        "type": "object",
        "properties": {
          "output": {
            "title": "uniconfig.manager.showconnectionstatus.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "uniconfig.manager.connectionstatusoutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Result of connection-status on actual node.",
                    "items": {
                      "title": "uniconfig.manager.nodeconnectionstatusresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "southbound-layer": {
                          "title": "uniconfig.manager.nodeconnectionstatusresults.noderesult.SouthboundLayer",
                          "type": "object",
                          "properties": {
                            "protocol": {
                              "$ref": "#/components/schemas/uniconfig.manager.ProtocolEnumeration"
                            },
                            "status-message": {
                              "type": "string",
                              "description": ""
                            },
                            "connection-status": {
                              "type": "string",
                              "description": ""
                            }
                          },
                          "description": ""
                        },
                        "unified-layer": {
                          "title": "uniconfig.manager.nodeconnectionstatusresults.noderesult.UnifiedLayer",
                          "type": "object",
                          "properties": {
                            "connection-status": {
                              "type": "string",
                              "description": ""
                            },
                            "status-message": {
                              "type": "string",
                              "description": ""
                            }
                          },
                          "description": ""
                        }
                      }
                    }
                  }
                },
                "description": "Individual results of connection-status for given nodes."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Shows connection status on Unified and southbound layers."
      },
      "uniconfig.manager.SyncFromNetwork": {
        "type": "object",
        "properties": {
          "output": {
            "title": "uniconfig.manager.syncfromnetwork.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "uniconfig.manager.syncfromnetworkoutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Result of synchronization of configuration from network element\nto actual uniconfig node.",
                    "items": {
                      "title": "uniconfig.manager.nodesyncresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        }
                      }
                    }
                  }
                },
                "description": "Individual result of sync for given nodes."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Synchronises configuration from network element to given uniconfig node."
      },
      "uniconfig.manager.Validate": {
        "type": "object",
        "properties": {
          "output": {
            "title": "uniconfig.manager.validate.Output",
            "type": "object",
            "properties": {
              "error-message": {
                "type": "string",
                "description": "Error message that describe overall problem."
              },
              "node-results": {
                "title": "uniconfig.manager.validateoutputfields.NodeResults",
                "type": "object",
                "properties": {
                  "node-result": {
                    "type": "array",
                    "description": "Result of configuration validation for actual uniconfig node.",
                    "items": {
                      "title": "uniconfig.manager.nodevalidateresults.NodeResult",
                      "type": "object",
                      "properties": {
                        "node-id": {
                          "type": "string",
                          "description": ""
                        },
                        "error-type": {
                          "$ref": "#/components/schemas/frinx.types.ErrorType"
                        },
                        "error-message": {
                          "type": "string",
                          "description": "Error message describing cause of error."
                        },
                        "status": {
                          "$ref": "#/components/schemas/frinx.types.OperationResultType"
                        }
                      }
                    }
                  }
                },
                "description": "Individual result of config validation for given nodes."
              },
              "overall-status": {
                "$ref": "#/components/schemas/frinx.types.OperationResultType"
              }
            },
            "description": ""
          }
        },
        "description": "Execute validation of configuration of network elements based on\ndiff between actual configuration and intended configuration.\nResult is returned in RFC output."
      },
      "uniconfig.manager.calculatediff.Input": {
        "type": "object",
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.calculategitlikediff.Input": {
        "type": "object",
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.checkedcommit.Input": {
        "type": "object",
        "properties": {
          "do-rollback": {
            "type": "boolean",
            "description": "Controls whether to roll back successfully configured devices in case of failure.\nApplies when configuring multiple devices within a single COMMIT RPC.\nBy default, if N devices succeed, but the N+1 device fails,\nthose N devices will be rolled back unless this option is set to false.\nThe N+1 device will always be rolled back regardless of this option."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.commit.Input": {
        "type": "object",
        "properties": {
          "do-rollback": {
            "type": "boolean",
            "description": "Controls whether to roll back successfully configured devices in case of failure.\nApplies when configuring multiple devices within a single COMMIT RPC.\nBy default, if N devices succeed, but the N+1 device fails,\nthose N devices will be rolled back unless this option is set to false.\nThe N+1 device will always be rolled back regardless of this option."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.isinsync.Input": {
        "type": "object",
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.replaceconfigwithoperational.Input": {
        "type": "object",
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.showconnectionstatus.Input": {
        "type": "object",
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.syncfromnetwork.Input": {
        "type": "object",
        "properties": {
          "check-timestamp": {
            "type": "boolean",
            "description": "Perform timestamp comparison(last known to Uniconfig vs current timestamp on device)\nbefore loading all configuration from a device."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.validate.Input": {
        "type": "object",
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "type": "object",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      }
    }
  }
}