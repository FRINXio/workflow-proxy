{
  "openapi": "3.0.1",
  "info": {
    "title": "uniconfig",
    "version": "5.0.15"
  },
  "servers": [
    {
      "url": "/api/uniconfig",
      "description": "Frinx APi gateway"
    }
  ],
  "paths": {
    "/data/available-cli-device-translations": {
      "get": {
        "tags": [
          "cli-translate-registry"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "cli.translate.registry.AvailableCliDeviceTranslations to be added or updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations"
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "creates or updates cli.translate.registry.AvailableCliDeviceTranslations",
        "parameters": [],
        "requestBody": {
          "description": "cli.translate.registry.AvailableCliDeviceTranslations to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations"
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created"
          },
          "204": {
            "description": "Object modified"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "creates cli.translate.registry.AvailableCliDeviceTranslations",
        "parameters": [],
        "requestBody": {
          "description": "cli.translate.registry.AvailableCliDeviceTranslations to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cli.translate.registry.AvailableCliDeviceTranslations"
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Object already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "cli-translate-registry"
        ],
        "description": "removes cli.translate.registry.AvailableCliDeviceTranslations",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Object deleted"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/operations/execute": {
      "post": {
        "tags": [
          "cli-unit-generic"
        ],
        "operationId": "rpc_execute",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.execute.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/cli.unit.generic.execute.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/execute-and-expect": {
      "post": {
        "tags": [
          "cli-unit-generic"
        ],
        "operationId": "rpc_execute-and-expect",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.executeandexpect.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/cli.unit.generic.executeandexpect.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/execute-and-read": {
      "post": {
        "tags": [
          "cli-unit-generic"
        ],
        "operationId": "rpc_execute-and-read",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.executeandread.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/cli.unit.generic.executeandread.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/execute-and-read-until": {
      "post": {
        "tags": [
          "cli-unit-generic"
        ],
        "operationId": "rpc_execute-and-read-until",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/cli.unit.generic.executeandreaduntil.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/cli.unit.generic.executeandreaduntil.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/uninstall-node": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_uninstall-node",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.uninstallnode.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/connection.manager.uninstallnode.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/uninstall-multiple-nodes": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_uninstall-multiple-nodes",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.uninstallmultiplenodes.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/connection.manager.uninstallmultiplenodes.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/get-installed-nodes": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_get-installed-nodes",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.getinstallednodes.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/connection.manager.getinstallednodes.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/install-node": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_install-node",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.installnode.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/connection.manager.installnode.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/change-admin-state": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_change-admin-state",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.changeadminstate.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/connection.manager.changeadminstate.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/unmount-node": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_unmount-node",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.unmountnode.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/connection.manager.unmountnode.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/mount-node": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_mount-node",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.mountnode.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/connection.manager.mountnode.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/install-multiple-nodes": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_install-multiple-nodes",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.installmultiplenodes.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/connection.manager.installmultiplenodes.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/check-installed-nodes": {
      "post": {
        "tags": [
          "connection-manager"
        ],
        "operationId": "rpc_check-installed-nodes",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/connection.manager.checkinstallednodes.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/connection.manager.checkinstallednodes.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/show-subscription-data": {
      "post": {
        "tags": [
          "data-change-events"
        ],
        "operationId": "rpc_show-subscription-data",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/data.change.events.showsubscriptiondata.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/data.change.events.showsubscriptiondata.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/delete-data-change-subscription": {
      "post": {
        "tags": [
          "data-change-events"
        ],
        "operationId": "rpc_delete-data-change-subscription",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/data.change.events.deletedatachangesubscription.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/create-data-change-subscription": {
      "post": {
        "tags": [
          "data-change-events"
        ],
        "operationId": "rpc_create-data-change-subscription",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/data.change.events.createdatachangesubscription.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/data.change.events.createdatachangesubscription.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/discover": {
      "post": {
        "tags": [
          "device-discovery"
        ],
        "operationId": "rpc_discover",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/device.discovery.discover.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/device.discovery.discover.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/dryrun-commit": {
      "post": {
        "tags": [
          "dryrun-manager"
        ],
        "operationId": "rpc_dryrun-commit",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/dryrun.manager.dryruncommit.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/dryrun.manager.dryruncommit.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/read-journal": {
      "post": {
        "tags": [
          "journal"
        ],
        "operationId": "rpc_read-journal",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/journal.readjournal.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/clear-journal": {
      "post": {
        "tags": [
          "journal"
        ],
        "operationId": "rpc_clear-journal",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/journal.clearjournal.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/enable-default-device-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_enable-default-device-logging",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.enabledefaultdevicelogging.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/logging.enabledefaultdevicelogging.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/disable-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_disable-logging",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.disablelogging.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/logging.disablelogging.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/set-global-hidden-types": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_set-global-hidden-types",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.setglobalhiddentypes.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/logging.setglobalhiddentypes.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/disable-device-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_disable-device-logging",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.disabledevicelogging.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/logging.disabledevicelogging.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/disable-default-device-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_disable-default-device-logging",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.disabledefaultdevicelogging.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/logging.disabledefaultdevicelogging.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/enable-device-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_enable-device-logging",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.enabledevicelogging.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/logging.enabledevicelogging.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/enable-logging": {
      "post": {
        "tags": [
          "logging"
        ],
        "operationId": "rpc_enable-logging",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/logging.enablelogging.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/logging.enablelogging.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/add-trusted-certificate": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_add-trusted-certificate",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.addtrustedcertificate.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/remove-keystore-entry": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_remove-keystore-entry",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.removekeystoreentry.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/add-keystore-entry": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_add-keystore-entry",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.addkeystoreentry.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/remove-trusted-certificate": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_remove-trusted-certificate",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.removetrustedcertificate.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/add-private-key": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_add-private-key",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.addprivatekey.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/remove-private-key": {
      "post": {
        "tags": [
          "netconf-keystore"
        ],
        "operationId": "rpc_remove-private-key",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/netconf.keystore.removeprivatekey.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/create-subscription": {
      "post": {
        "tags": [
          "notifications"
        ],
        "operationId": "rpc_create-subscription",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/notifications.createsubscription.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/set-hidden-http-headers": {
      "post": {
        "tags": [
          "restconf-logging"
        ],
        "operationId": "rpc_set-hidden-http-headers",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/restconf.logging.sethiddenhttpheaders.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/restconf.logging.sethiddenhttpheaders.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/set-hidden-http-methods": {
      "post": {
        "tags": [
          "restconf-logging"
        ],
        "operationId": "rpc_set-hidden-http-methods",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/restconf.logging.sethiddenhttpmethods.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/restconf.logging.sethiddenhttpmethods.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/register-repository": {
      "post": {
        "tags": [
          "schema-resources"
        ],
        "operationId": "rpc_register-repository",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/schema.resources.registerrepository.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/schema.resources.registerrepository.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/data/snapshots-metadata": {
      "get": {
        "tags": [
          "snapshot-manager"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "snapshot.manager.SnapshotsMetadata to be added or updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snapshot.manager.SnapshotsMetadata"
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "creates or updates snapshot.manager.SnapshotsMetadata",
        "parameters": [],
        "requestBody": {
          "description": "snapshot.manager.SnapshotsMetadata to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot.manager.SnapshotsMetadata"
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created"
          },
          "204": {
            "description": "Object modified"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "creates snapshot.manager.SnapshotsMetadata",
        "parameters": [],
        "requestBody": {
          "description": "snapshot.manager.SnapshotsMetadata to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot.manager.SnapshotsMetadata"
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Object already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "removes snapshot.manager.SnapshotsMetadata",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Object deleted"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data/snapshots-metadata/snapshot={name}": {
      "get": {
        "tags": [
          "snapshot-manager"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Id of snapshot",
            "required": true,
            "schema": {
              "type": "string",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "snapshot.manager.snapshotsmetadata.Snapshot to be added or updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "creates or updates snapshot.manager.snapshotsmetadata.Snapshot",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Id of snapshot",
            "required": true,
            "schema": {
              "type": "string",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "description": "snapshot.manager.snapshotsmetadata.Snapshot to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created"
          },
          "204": {
            "description": "Object modified"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "creates snapshot.manager.snapshotsmetadata.Snapshot",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Id of snapshot",
            "required": true,
            "schema": {
              "type": "string",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "description": "snapshot.manager.snapshotsmetadata.Snapshot to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Object already exists"
          }
        }
      },
      "delete": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "removes snapshot.manager.snapshotsmetadata.Snapshot",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Id of snapshot",
            "required": true,
            "schema": {
              "type": "string",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Object deleted"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/data/snapshots-metadata/snapshot": {
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "description": "creates snapshot.manager.snapshotsmetadata.Snapshot",
        "parameters": [],
        "requestBody": {
          "description": "snapshot.manager.snapshotsmetadata.Snapshot to be added to list",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Object created"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Object already exists"
          }
        }
      }
    },
    "/operations/delete-snapshot": {
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "operationId": "rpc_delete-snapshot",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/snapshot.manager.deletesnapshot.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/snapshot.manager.deletesnapshot.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/create-snapshot": {
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "operationId": "rpc_create-snapshot",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/snapshot.manager.createsnapshot.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/snapshot.manager.createsnapshot.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/replace-config-with-snapshot": {
      "post": {
        "tags": [
          "snapshot-manager"
        ],
        "operationId": "rpc_replace-config-with-snapshot",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/snapshot.manager.replaceconfigwithsnapshot.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/snapshot.manager.replaceconfigwithsnapshot.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/copy-one-to-one": {
      "post": {
        "tags": [
          "subtree-manager"
        ],
        "operationId": "rpc_copy-one-to-one",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.copyonetoone.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/subtree.manager.copyonetoone.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/copy-one-to-many": {
      "post": {
        "tags": [
          "subtree-manager"
        ],
        "operationId": "rpc_copy-one-to-many",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.copyonetomany.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/subtree.manager.copyonetomany.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/calculate-subtree-diff": {
      "post": {
        "tags": [
          "subtree-manager"
        ],
        "operationId": "rpc_calculate-subtree-diff",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.calculatesubtreediff.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/subtree.manager.calculatesubtreediff.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/copy-many-to-one": {
      "post": {
        "tags": [
          "subtree-manager"
        ],
        "operationId": "rpc_copy-many-to-one",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.copymanytoone.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/subtree.manager.copymanytoone.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/calculate-subtree-git-like-diff": {
      "post": {
        "tags": [
          "subtree-manager"
        ],
        "operationId": "rpc_calculate-subtree-git-like-diff",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.calculatesubtreegitlikediff.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/subtree.manager.calculatesubtreegitlikediff.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/bulk-edit": {
      "post": {
        "tags": [
          "subtree-manager"
        ],
        "operationId": "rpc_bulk-edit",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/subtree.manager.bulkedit.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/subtree.manager.bulkedit.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/apply-template": {
      "post": {
        "tags": [
          "template-manager"
        ],
        "operationId": "rpc_apply-template",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/template.manager.applytemplate.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/template.manager.applytemplate.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/upgrade-template": {
      "post": {
        "tags": [
          "template-manager"
        ],
        "operationId": "rpc_upgrade-template",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/template.manager.upgradetemplate.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/get-template-info": {
      "post": {
        "tags": [
          "template-manager"
        ],
        "operationId": "rpc_get-template-info",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/template.manager.gettemplateinfo.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/template.manager.gettemplateinfo.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/create-multiple-templates": {
      "post": {
        "tags": [
          "template-manager"
        ],
        "operationId": "rpc_create-multiple-templates",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/template.manager.createmultipletemplates.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/template.manager.createmultipletemplates.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/revert-changes": {
      "post": {
        "tags": [
          "transaction-log"
        ],
        "operationId": "rpc_revert-changes",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/transaction.log.revertchanges.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/transaction.log.revertchanges.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/sync-to-network": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_sync-to-network",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.synctonetwork.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/uniconfig.manager.synctonetwork.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/calculate-diff": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_calculate-diff",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.calculatediff.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/uniconfig.manager.calculatediff.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/sync-from-network": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_sync-from-network",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.syncfromnetwork.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/uniconfig.manager.syncfromnetwork.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/calculate-git-like-diff": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_calculate-git-like-diff",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.calculategitlikediff.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/uniconfig.manager.calculategitlikediff.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/health": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_health",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/uniconfig.manager.health.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/replace-config-with-operational": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_replace-config-with-operational",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.replaceconfigwithoperational.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/uniconfig.manager.replaceconfigwithoperational.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/validate": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_validate",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.validate.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/uniconfig.manager.validate.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/commit": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_commit",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.commit.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/uniconfig.manager.commit.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/checked-commit": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_checked-commit",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.checkedcommit.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/uniconfig.manager.checkedcommit.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/is-in-sync": {
      "post": {
        "tags": [
          "uniconfig-manager"
        ],
        "operationId": "rpc_is-in-sync",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.manager.isinsync.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/uniconfig.manager.isinsync.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    },
    "/operations/query-config": {
      "post": {
        "tags": [
          "uniconfig-query"
        ],
        "operationId": "rpc_query-config",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "$ref": "#/components/schemas/uniconfig.query.queryconfig.Input"
                  }
                }
              },
              "encoding": {
                "application/json": {
                  "contentType": "application/json"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Correct response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "$ref": "#/components/schemas/uniconfig.query.queryconfig.Output"
                    }
                  }
                },
                "encoding": {
                  "application/json": {
                    "contentType": "application/json"
                  }
                }
              }
            }
          },
          "201": {
            "description": "No response"
          },
          "400": {
            "description": "Internal error"
          },
          "401": {
            "description": "No response"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "cli.topology.JournalLevel": {
        "type": "string",
        "enum": [
          "command-only",
          "extended"
        ]
      },
      "cli.topology.ParsingEngine": {
        "type": "string",
        "enum": [
          "batch-parser",
          "tree-parser",
          "one-line-parser"
        ]
      },
      "cli.topology.TransportTypeEnumeration": {
        "type": "string",
        "enum": [
          "ssh",
          "telnet"
        ]
      },
      "cli.translate.registry.AvailableCliDeviceTranslations": {
        "properties": {
          "available-cli-device-translation": {
            "type": "array",
            "description": "",
            "items": {
              "title": "cli.translate.registry.availableclidevicetranslations.AvailableCliDeviceTranslation",
              "properties": {
                "default-commit-error-patterns": {
                  "title": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns",
                  "properties": {
                    "commit-error-pattern": {
                      "type": "array",
                      "description": "Device specific commit error patterns.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Device specific list of commit error patterns. The following list\nof patterns is checked in the input after 'commit' command is sent."
                },
                "device-type": {
                  "type": "string",
                  "description": ""
                },
                "default-error-patterns": {
                  "title": "cli.translate.registry.errorpatterns.DefaultErrorPatterns",
                  "properties": {
                    "error-pattern": {
                      "type": "array",
                      "description": "Device specific error patterns.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Device specific list of error patterns. This list is the primary source\nof error checking on the device. This list can be overridden from the code."
                },
                "device-version": {
                  "type": "string",
                  "description": ""
                }
              }
            }
          }
        },
        "description": ""
      },
      "cli.unit.generic.execute.Input": {
        "properties": {
          "wait-for-output-timer": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "If no output is received during this time, then execute next command.\nCommands are sent without waiting for their echo.",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "Input configuration snippet (one or multiple commands separated by newline)."
          }
        },
        "description": ""
      },
      "cli.unit.generic.execute.Output": {
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the executed RPC."
          }
        },
        "description": ""
      },
      "cli.unit.generic.executeandexpect.Input": {
        "properties": {
          "wait-for-output-timer": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "If no output is received during this time, then execute next command.\nCommands are sent without waiting for their echo.",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "Input configuration snippet (one or multiple commands separated by newline)."
          }
        },
        "description": ""
      },
      "cli.unit.generic.executeandexpect.Output": {
        "properties": {
          "output": {
            "type": "string",
            "description": "Output that is composed from the inputs/prompts/outputs of executed commands."
          }
        },
        "description": ""
      },
      "cli.unit.generic.executeandread.Input": {
        "properties": {
          "wait-for-output-timer": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "If no output is received during this time, then execute next command.\nCommands are sent without waiting for their echo.",
            "format": "int32"
          },
          "command": {
            "type": "string",
            "description": "Input configuration snippet (one or multiple commands separated by newline)."
          }
        },
        "description": ""
      },
      "cli.unit.generic.executeandread.Output": {
        "properties": {
          "output": {
            "type": "string",
            "description": "Output that is composed from the inputs/prompts/outputs of executed commands."
          }
        },
        "description": ""
      },
      "cli.unit.generic.executeandreaduntil.Input": {
        "properties": {
          "wait-for-output-timer": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "If no output is received during this time, then execute next command.\nCommands are sent without waiting for their echo.",
            "format": "int32"
          },
          "last-output": {
            "type": "string",
            "description": "Expected last output of the last command - it is usually name of the prompt in the\nspecific configuration mode."
          },
          "command": {
            "type": "string",
            "description": "Input configuration snippet (one or multiple commands separated by newline)."
          }
        },
        "description": ""
      },
      "cli.unit.generic.executeandreaduntil.Output": {
        "properties": {
          "output": {
            "type": "string",
            "description": "Output that is composed from the inputs/prompts/outputs of executed commands."
          }
        },
        "description": ""
      },
      "connection.manager.AdminState": {
        "type": "string",
        "enum": [
          "locked",
          "unlocked",
          "southbound_locked"
        ]
      },
      "connection.manager.ConnectionType": {
        "type": "string",
        "enum": [
          "cli",
          "netconf",
          "uniconfig-preferred-connection",
          "gnmi"
        ]
      },
      "connection.manager.MountType": {
        "type": "string",
        "enum": [
          "cli",
          "netconf",
          "uniconfig-preferred-connection",
          "gnmi"
        ]
      },
      "connection.manager.changeadminstate.Input": {
        "properties": {
          "node-id": {
            "type": "string",
            "description": "Node identifier of CLI/NETCONF node."
          },
          "admin-state": {
            "$ref": "#/components/schemas/connection.manager.AdminState"
          }
        },
        "description": ""
      },
      "connection.manager.changeadminstate.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Message that described occured error during invocation of operation."
          },
          "status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "connection.manager.checkinstallednodes.Input": {
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfignodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "connection.manager.checkinstallednodes.Output": {
        "properties": {
          "nodes": {
            "type": "array",
            "description": "List of node identifiers.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "connection.manager.getinstallednodes.Input": {
        "properties": {
          "mount-type": {
            "$ref": "#/components/schemas/connection.manager.MountType"
          }
        },
        "description": ""
      },
      "connection.manager.getinstallednodes.Output": {
        "properties": {
          "nodes": {
            "type": "array",
            "description": "List of node identifiers.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "connection.manager.installmultiplenodes.Input": {
        "properties": {
          "nodes": {
            "type": "array",
            "description": "",
            "items": {
              "title": "connection.manager.installmultiplenodes.input.Nodes",
              "properties": {
                "node-id": {
                  "type": "string",
                  "description": "Node identifier of CLI/NETCONF node."
                },
                "cli": {
                  "title": "connection.manager.installmultiplenodes.input.nodes.Cli",
                  "properties": {
                    "cli-topology:device-type": {
                      "type": "string",
                      "description": ""
                    },
                    "uniconfig-config:confirmed-commit-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
                    },
                    "secret": {
                      "type": "string",
                      "description": "Privileged EXEC mode password for Cisco IOS devices. If not set credentials\npassword will be used",
                      "x-choice": "privileged-mode-credentials:ios-enable-password"
                    },
                    "cli-topology:dry-run-journal-size": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Size of the DRY RUN cli mountpoint jounral. DRY RUN journal captures commands that would be\nexecuted when reading/writing some configuration. However the commands are not actually sent\nto the device",
                      "format": "int32"
                    },
                    "keepalive-initial-delay": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:keepalive"
                    },
                    "password": {
                      "type": "string",
                      "description": "",
                      "x-choice": "credentials:login-password"
                    },
                    "keepalive-timeout": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:keepalive"
                    },
                    "uniconfig-config:crypto": {
                      "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                      "properties": {
                        "public-key-path": {
                          "type": "string",
                          "description": "Path to leaf containing public key in Base64 binary format."
                        },
                        "public-key-cipher-type": {
                          "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                        }
                      },
                      "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
                    },
                    "cli-topology:max-reconnection-attempts": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "number",
                      "description": "Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.\nThis is an optional parameter. If set, max-connection-attempts will be used only once,\nfor the first connection attempts and for any subsequent disconnect-connect cycles,\nmax-reconnect-attempts will be used. This enables users using different amount of reconnects\nfor initial attempts vs subsequent reconnects."
                    },
                    "uniconfig-config:install-uniconfig-node-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "connection-lazy-timeout": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Maximal time (in seconds) for connection to keep alive, if no activity was detected\nin the session and the timeout has been reached, connection will be stopped",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:lazy"
                    },
                    "cli-topology:device-version": {
                      "type": "string",
                      "description": ""
                    },
                    "cli-topology:max-connection-attempts": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "number",
                      "description": "Maximum number of connection attempts before connection initialization is marked as failed.\nValue 0 disables this limit."
                    },
                    "connection-establish-timeout": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Maximal time (in seconds) for connection establishment, if a connection attempt does\nnot succeed in this time, the attempt is considered a failure",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:lazy"
                    },
                    "uniconfig-config:admin-state": {
                      "$ref": "#/components/schemas/uniconfig.config.AdminState"
                    },
                    "cli-topology:pass-through": {
                      "title": "cli.topology.clinodeconnectionstatus.PassThrough",
                      "properties": {},
                      "description": "When the underlying node is connected, its cli context\nis available verbatim under this container through the\nmount extension."
                    },
                    "cli-topology:host": {
                      "type": "string",
                      "description": ""
                    },
                    "cli-topology:default-error-patterns": {
                      "title": "cli.translate.registry.errorpatterns.DefaultErrorPatterns",
                      "properties": {
                        "error-pattern": {
                          "type": "array",
                          "description": "Device specific error patterns.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Device specific list of error patterns. This list is the primary source\nof error checking on the device. This list can be overridden from the code."
                    },
                    "cli-topology:transport-type": {
                      "$ref": "#/components/schemas/cli.topology.TransportTypeEnumeration"
                    },
                    "blacklist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are not invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:bl"
                    },
                    "uniconfig-config:validation-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send validate RPC before commit RPC."
                    },
                    "whitelist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:wl"
                    },
                    "cli-topology:default-commit-error-patterns": {
                      "title": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns",
                      "properties": {
                        "commit-error-pattern": {
                          "type": "array",
                          "description": "Device specific commit error patterns.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Device specific list of commit error patterns. The following list\nof patterns is checked in the input after 'commit' command is sent."
                    },
                    "cli-topology:journal-level": {
                      "$ref": "#/components/schemas/cli.topology.JournalLevel"
                    },
                    "uniconfig-config:sequence-read-active": {
                      "type": "boolean",
                      "description": "Forces reading of data sequentially when mounting device."
                    },
                    "keepalive-delay": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:keepalive"
                    },
                    "cli-topology:journal-size": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Size of the cli mountpoint jounral. Journal keeps track of executed commands and makes\nthem available for users/apps for debugging purposes. Value 0 disables journaling",
                      "format": "int32"
                    },
                    "command-timeout": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Maximal time (in seconds) for command execution, if a command cannot be executed on\na device in this time, the execution is considered a failure",
                      "format": "int32",
                      "x-choice": "keepalive-strategy:lazy"
                    },
                    "uniconfig-config:uniconfig-native-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "cli-topology:port": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "",
                      "format": "int32"
                    },
                    "cli-topology:parsing-engine": {
                      "$ref": "#/components/schemas/cli.topology.ParsingEngine"
                    },
                    "username": {
                      "type": "string",
                      "description": "",
                      "x-choice": "credentials:login-password"
                    }
                  },
                  "description": "CLI node settings."
                },
                "netconf": {
                  "title": "connection.manager.installmultiplenodes.input.nodes.Netconf",
                  "properties": {
                    "concurrent-rpc-limit": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Limit of concurrent messages that can be send before reply messages are received.\nIf value <1 is provided, no limit will be enforced",
                      "format": "int32",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "uniconfig-config:confirmed-commit-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
                    },
                    "max-reconnection-attempts": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "number",
                      "description": "Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.\nThis is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts\nand for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.\nThis enables users using different amount of reconnects for initial attempts vs subsequent reconnects.",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "netconf-node-topology:tcp-only": {
                      "type": "boolean",
                      "description": ""
                    },
                    "streaming-session": {
                      "type": "boolean",
                      "description": "NETCONF session is created and optimized for receiving of NETCONF notifications\nfrom remote server.",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "netconf-node-topology:yang-module-capabilities": {
                      "title": "netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities",
                      "properties": {
                        "capability": {
                          "type": "array",
                          "description": "Set a list of capabilities to override capabilities provided in device's hello message.\nCan be used for devices that do not report any yang modules in their hello message",
                          "items": {
                            "type": "string"
                          }
                        },
                        "override": {
                          "type": "boolean",
                          "description": "Whether to override or merge this list of capabilities with capabilities from device"
                        }
                      },
                      "description": ""
                    },
                    "max-connection-attempts": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "number",
                      "description": "Maximum number of connection retries. Non positive value or null is interpreted as infinity.",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "reconnect-on-changed-schema": {
                      "type": "boolean",
                      "description": "If it is set to 'true', NETCONF notifications are supported by device, and NETCONF\nnotifications are enabled ('enabled-notifications' flag), the connector would auto\ndisconnect/reconnect when schemas are changed in the remote device. The connector subscribes\n(right after connect) to base netconf notifications and listens\nfor netconf-capability-change notification",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "dry-run-journal-size": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that\nwould be executed when reading/writing some configuration. However the RPCs are not actually\nsent to the device",
                      "format": "int32",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "flags": {
                      "title": "netconf.node.topology.netconfparametersgroups.Flags",
                      "properties": {
                        "streaming-session": {
                          "type": "boolean",
                          "description": "NETCONF session is created and optimized for receiving of NETCONF notifications\nfrom remote server."
                        },
                        "enabled-notifications": {
                          "type": "boolean",
                          "description": "If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will\nexpose NETCONF notification and subscription services."
                        },
                        "reconnect-on-changed-schema": {
                          "type": "boolean",
                          "description": "If it is set to 'true', NETCONF notifications are supported by device, and NETCONF\nnotifications are enabled ('enabled-notifications' flag), the connector would auto\ndisconnect/reconnect when schemas are changed in the remote device. The connector subscribes\n(right after connect) to base netconf notifications and listens\nfor netconf-capability-change notification"
                        },
                        "enabled-strict-parsing": {
                          "type": "boolean",
                          "description": "If this parameter is set to 'false', then parser should ignore unknown elements and not throw\nexception during parsing."
                        }
                      },
                      "description": "",
                      "x-choice": "netconf-parameters:netconf-parameters-new-format"
                    },
                    "netconf-node-topology:port": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "",
                      "format": "int32"
                    },
                    "netconf-node-topology:yang-library": {
                      "title": "netconf.node.topology.netconfschemastorage.YangLibrary",
                      "properties": {
                        "password": {
                          "type": "string",
                          "description": ""
                        },
                        "yang-library-url": {
                          "type": "string",
                          "description": "Yang library to be plugged as additional source provider into the shared schema repository"
                        },
                        "username": {
                          "type": "string",
                          "description": ""
                        }
                      },
                      "description": ""
                    },
                    "netconf-node-topology:odl-hello-message-capabilities": {
                      "title": "netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities",
                      "properties": {
                        "capability": {
                          "type": "array",
                          "description": "Certain devices are non-accepting of ODL's hello message.  This allows specification of\na custom ODL hello message based on a list of supported capabilities.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": ""
                    },
                    "strict-parsing": {
                      "type": "boolean",
                      "description": "If this parameter is set to 'false', then parser should ignore unknown elements and not throw\nexception during parsing.",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "password": {
                      "type": "string",
                      "description": "",
                      "x-choice": "credentials:login-password"
                    },
                    "enabled-notifications": {
                      "type": "boolean",
                      "description": "If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will\nexpose NETCONF notification and subscription services.",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "confirm-timeout": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "number",
                      "description": "Timeout period in seconds to issued commit after confirmed-commit",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "sleep-factor": {
                      "maximum": 922337203685477600,
                      "minimum": -922337203685477600,
                      "type": "integer",
                      "description": "After each reconnection attempt, the delay between reconnection attempts is\nmultiplied by this factor. By default, it is set to 1.5. This means that the next\ndelay between attempts will be 3000 ms, then it will be 4500 ms, etc.",
                      "format": "int32",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "uniconfig-config:crypto": {
                      "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                      "properties": {
                        "public-key-path": {
                          "type": "string",
                          "description": "Path to leaf containing public key in Base64 binary format."
                        },
                        "public-key-cipher-type": {
                          "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                        }
                      },
                      "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
                    },
                    "other-parameters": {
                      "title": "netconf.node.topology.netconfparametersgroups.OtherParameters",
                      "properties": {
                        "concurrent-rpc-limit": {
                          "maximum": 65535,
                          "minimum": 0,
                          "type": "integer",
                          "description": "Limit of concurrent messages that can be send before reply messages are received.\nIf value <1 is provided, no limit will be enforced",
                          "format": "int32"
                        },
                        "dry-run-journal-size": {
                          "maximum": 65535,
                          "minimum": 0,
                          "type": "integer",
                          "description": "Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that\nwould be executed when reading/writing some configuration. However the RPCs are not actually\nsent to the device",
                          "format": "int32"
                        },
                        "custom-connector-factory": {
                          "type": "string",
                          "description": "Specification of the custom NETCONF connector factory. For example,\n           if device doesn't support candidate data-store, this parameter\n           should be set to 'netconf-customization-alu-ignore-candidate' string."
                        },
                        "edit-config-test-option": {
                          "$ref": "#/components/schemas/netconf.node.topology.EditConfigTestOption"
                        }
                      },
                      "description": "",
                      "x-choice": "netconf-parameters:netconf-parameters-new-format"
                    },
                    "uniconfig-config:install-uniconfig-node-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "netconf-node-topology:schema-cache-directory": {
                      "type": "string",
                      "description": "The destination schema repository for yang files relative to the cache directory.  This may be specified per netconf mount\nso that the loaded yang files are stored to a distinct directory to avoid potential conflict."
                    },
                    "between-attempts-timeout-millis": {
                      "maximum": 65535,
                      "minimum": 0,
                      "type": "integer",
                      "description": "Initial timeout in milliseconds to wait between connection attempts. Will be multiplied by sleep-factor with every additional attempt",
                      "format": "int32",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "netconf-node-topology:pass-through": {
                      "title": "netconf.node.topology.netconfnodeconnectionstatus.PassThrough",
                      "properties": {},
                      "description": "When the underlying node is connected, its NETCONF context\nis available verbatim under this container through the\nmount extension."
                    },
                    "netconf-subscriptions:stream": {
                      "type": "array",
                      "description": "List of available streams to which subscription can be created.",
                      "items": {
                        "title": "netconf.subscriptions.streamslist.Stream",
                        "properties": {
                          "stop-time": {
                            "type": "string",
                            "description": "RFC5277: An optional parameter, <stopTime>, used with the optional replay feature to indicate the newest\nnotifications of interest. If <stopTime> is not present, the notifications will continue until the\nsubscription is terminated. Must be used with and be later than <startTime>. Values of <stopTime>\nin the future are valid."
                          },
                          "start-time": {
                            "type": "string",
                            "description": "RFC5277: A parameter, <startTime>, used to trigger the replay feature and indicate that the replay\nshould start at the time specified. If <startTime> is not present, this is not a replay subscription.\nIt is not valid to specify start times that are later than the current time. If the <startTime> specified\nis earlier than the log can support, the replay will begin with the earliest available notification."
                          },
                          "stream-name": {
                            "type": "string",
                            "description": "Identifier of the notification stream."
                          }
                        }
                      }
                    },
                    "netconf-node-topology:non-module-capabilities": {
                      "title": "netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities",
                      "properties": {
                        "capability": {
                          "type": "array",
                          "description": "Set a list of non-module based capabilities to override or merge non-module capabilities\nprovided in device's hello message. Can be used for devices that do not report or\nincorrectly report non-module based capabilities in their hello message",
                          "items": {
                            "type": "string"
                          }
                        },
                        "override": {
                          "type": "boolean",
                          "description": "Whether to override or merge this list of non-module based capabilities with non-module\nbased capabilities from device"
                        }
                      },
                      "description": ""
                    },
                    "netconf-node-topology:schemaless": {
                      "type": "boolean",
                      "description": ""
                    },
                    "edit-config-test-option": {
                      "$ref": "#/components/schemas/netconf.node.topology.EditConfigTestOption"
                    },
                    "uniconfig-config:admin-state": {
                      "$ref": "#/components/schemas/uniconfig.config.AdminState"
                    },
                    "key-based": {
                      "title": "netconf.node.topology.netconfnodecredentials.credentials.keyauth.KeyBased",
                      "properties": {
                        "key-id": {
                          "type": "string",
                          "description": ""
                        },
                        "username": {
                          "type": "string",
                          "description": ""
                        }
                      },
                      "description": "",
                      "x-choice": "credentials:key-auth"
                    },
                    "blacklist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are not invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:bl"
                    },
                    "uniconfig-config:validation-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send validate RPC before commit RPC."
                    },
                    "session-timers": {
                      "title": "netconf.node.topology.netconfparametersgroups.SessionTimers",
                      "properties": {
                        "keepalive-delay": {
                          "maximum": 4294967295,
                          "minimum": 0,
                          "type": "number",
                          "description": "Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds\nIf a value <1 is provided, no keepalives will be sent"
                        },
                        "max-reconnection-attempts": {
                          "maximum": 4294967295,
                          "minimum": 0,
                          "type": "number",
                          "description": "Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.\nThis is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts\nand for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.\nThis enables users using different amount of reconnects for initial attempts vs subsequent reconnects."
                        },
                        "reconnenction-attempts-multiplier": {
                          "maximum": 922337203685477600,
                          "minimum": -922337203685477600,
                          "type": "integer",
                          "description": "After each reconnection attempt, the delay between reconnection attempts is\nmultiplied by this factor. By default, it is set to 1.5. This means that the next\ndelay between attempts will be 3000 ms, then it will be 4500 ms, etc.",
                          "format": "int32"
                        },
                        "confirm-commit-timeout": {
                          "maximum": 4294967295,
                          "minimum": 0,
                          "type": "number",
                          "description": "Timeout period in seconds to issued commit after confirmed-commit"
                        },
                        "request-transaction-timeout": {
                          "maximum": 4294967295,
                          "minimum": 0,
                          "type": "number",
                          "description": "Timeout in seconds for blocking operations within transactions."
                        },
                        "max-connection-attempts": {
                          "maximum": 4294967295,
                          "minimum": 0,
                          "type": "number",
                          "description": "Maximum number of connection retries. Non positive value or null is interpreted as infinity."
                        },
                        "initial-connection-timeout": {
                          "maximum": 4294967295,
                          "minimum": 0,
                          "type": "number",
                          "description": "Specifies timeout in seconds after which connection must be established."
                        },
                        "between-attempts-timeout": {
                          "maximum": 65535,
                          "minimum": 0,
                          "type": "integer",
                          "description": "Initial timeout in seconds to wait between connection attempts.\nWill be multiplied by reconenction-attempts-multiplier with every additional attempt",
                          "format": "int32"
                        }
                      },
                      "description": "",
                      "x-choice": "netconf-parameters:netconf-parameters-new-format"
                    },
                    "whitelist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:wl"
                    },
                    "uniconfig-config:sequence-read-active": {
                      "type": "boolean",
                      "description": "Forces reading of data sequentially when mounting device."
                    },
                    "keepalive-delay": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "number",
                      "description": "Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds\nIf a value <1 is provided, no keepalives will be sent",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "netconf-node-topology:host": {
                      "type": "string",
                      "description": ""
                    },
                    "default-request-timeout-millis": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "number",
                      "description": "Timeout in milliseconds for blocking operations within transactions.",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "connection-timeout-millis": {
                      "maximum": 4294967295,
                      "minimum": 0,
                      "type": "number",
                      "description": "Specifies timeout in milliseconds after which connection must be established.",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "login-password-unencrypted": {
                      "title": "netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted",
                      "properties": {
                        "password": {
                          "type": "string",
                          "description": ""
                        },
                        "username": {
                          "type": "string",
                          "description": ""
                        }
                      },
                      "description": "",
                      "x-choice": "credentials:login-pw-unencrypted"
                    },
                    "customization-factory": {
                      "type": "string",
                      "description": "Specification of the custom NETCONF connector factory. For example,\nif device doesn't support candidate data-store, this parameter\nshould be set to 'netconf-customization-alu-ignore-candidate' string.",
                      "x-choice": "netconf-parameters:netconf-parameters-old-format"
                    },
                    "login-password": {
                      "title": "netconf.node.topology.netconfnodecredentials.credentials.loginpw.LoginPassword",
                      "properties": {
                        "password": {
                          "type": "string",
                          "description": ""
                        },
                        "username": {
                          "type": "string",
                          "description": ""
                        }
                      },
                      "description": "",
                      "x-choice": "credentials:login-pw"
                    },
                    "uniconfig-config:uniconfig-native-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "username": {
                      "type": "string",
                      "description": "",
                      "x-choice": "credentials:login-password"
                    }
                  },
                  "description": "NETCONF node settings."
                },
                "sync-node": {
                  "type": "boolean",
                  "description": "Flag that can be used to disable device mounting and configuration syncing."
                },
                "gnmi": {
                  "title": "connection.manager.installmultiplenodes.input.nodes.Gnmi",
                  "properties": {
                    "uniconfig-config:sequence-read-active": {
                      "type": "boolean",
                      "description": "Forces reading of data sequentially when mounting device."
                    },
                    "uniconfig-config:confirmed-commit-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
                    },
                    "uniconfig-config:admin-state": {
                      "$ref": "#/components/schemas/uniconfig.config.AdminState"
                    },
                    "uniconfig-config:crypto": {
                      "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                      "properties": {
                        "public-key-path": {
                          "type": "string",
                          "description": "Path to leaf containing public key in Base64 binary format."
                        },
                        "public-key-cipher-type": {
                          "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                        }
                      },
                      "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
                    },
                    "blacklist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are not invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:bl"
                    },
                    "uniconfig-config:validation-enabled": {
                      "type": "boolean",
                      "description": "Specifies whether to send validate RPC before commit RPC."
                    },
                    "uniconfig-config:uniconfig-native-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "uniconfig-config:install-uniconfig-node-enabled": {
                      "type": "boolean",
                      "description": ""
                    },
                    "whitelist": {
                      "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "extension": {
                          "type": "array",
                          "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Reads which are invoked for sync-from-network and initial config read.",
                      "x-choice": "nodes:wl"
                    }
                  },
                  "description": "gNMI node settings."
                }
              }
            }
          }
        },
        "description": ""
      },
      "connection.manager.installmultiplenodes.Output": {
        "properties": {
          "node-results": {
            "type": "array",
            "description": "",
            "items": {
              "title": "connection.manager.multiplenodesoutputfields.NodeResults",
              "properties": {
                "node-id": {
                  "type": "string",
                  "description": "Node identifier of CLI/NETCONF node."
                },
                "error-message": {
                  "type": "string",
                  "description": "Message that described occured error during invocation of operation on a specific node."
                },
                "status": {
                  "$ref": "#/components/schemas/frinx.types.OperationResultType"
                }
              }
            }
          }
        },
        "description": ""
      },
      "connection.manager.installnode.Input": {
        "properties": {
          "node-id": {
            "type": "string",
            "description": "Node identifier of CLI/NETCONF node."
          },
          "cli": {
            "title": "connection.manager.installnode.input.Cli",
            "properties": {
              "cli-topology:device-type": {
                "type": "string",
                "description": ""
              },
              "uniconfig-config:confirmed-commit-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
              },
              "secret": {
                "type": "string",
                "description": "Privileged EXEC mode password for Cisco IOS devices. If not set credentials\npassword will be used",
                "x-choice": "privileged-mode-credentials:ios-enable-password"
              },
              "cli-topology:dry-run-journal-size": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Size of the DRY RUN cli mountpoint jounral. DRY RUN journal captures commands that would be\nexecuted when reading/writing some configuration. However the commands are not actually sent\nto the device",
                "format": "int32"
              },
              "keepalive-initial-delay": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "",
                "format": "int32",
                "x-choice": "keepalive-strategy:keepalive"
              },
              "password": {
                "type": "string",
                "description": "",
                "x-choice": "credentials:login-password"
              },
              "keepalive-timeout": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "",
                "format": "int32",
                "x-choice": "keepalive-strategy:keepalive"
              },
              "uniconfig-config:crypto": {
                "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                "properties": {
                  "public-key-path": {
                    "type": "string",
                    "description": "Path to leaf containing public key in Base64 binary format."
                  },
                  "public-key-cipher-type": {
                    "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                  }
                },
                "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
              },
              "cli-topology:max-reconnection-attempts": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "number",
                "description": "Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.\nThis is an optional parameter. If set, max-connection-attempts will be used only once,\nfor the first connection attempts and for any subsequent disconnect-connect cycles,\nmax-reconnect-attempts will be used. This enables users using different amount of reconnects\nfor initial attempts vs subsequent reconnects."
              },
              "uniconfig-config:install-uniconfig-node-enabled": {
                "type": "boolean",
                "description": ""
              },
              "connection-lazy-timeout": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Maximal time (in seconds) for connection to keep alive, if no activity was detected\nin the session and the timeout has been reached, connection will be stopped",
                "format": "int32",
                "x-choice": "keepalive-strategy:lazy"
              },
              "cli-topology:device-version": {
                "type": "string",
                "description": ""
              },
              "cli-topology:max-connection-attempts": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "number",
                "description": "Maximum number of connection attempts before connection initialization is marked as failed.\nValue 0 disables this limit."
              },
              "connection-establish-timeout": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Maximal time (in seconds) for connection establishment, if a connection attempt does\nnot succeed in this time, the attempt is considered a failure",
                "format": "int32",
                "x-choice": "keepalive-strategy:lazy"
              },
              "uniconfig-config:admin-state": {
                "$ref": "#/components/schemas/uniconfig.config.AdminState"
              },
              "cli-topology:pass-through": {
                "title": "cli.topology.clinodeconnectionstatus.PassThrough",
                "properties": {},
                "description": "When the underlying node is connected, its cli context\nis available verbatim under this container through the\nmount extension."
              },
              "cli-topology:host": {
                "type": "string",
                "description": ""
              },
              "cli-topology:default-error-patterns": {
                "title": "cli.translate.registry.errorpatterns.DefaultErrorPatterns",
                "properties": {
                  "error-pattern": {
                    "type": "array",
                    "description": "Device specific error patterns.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Device specific list of error patterns. This list is the primary source\nof error checking on the device. This list can be overridden from the code."
              },
              "cli-topology:transport-type": {
                "$ref": "#/components/schemas/cli.topology.TransportTypeEnumeration"
              },
              "blacklist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are not invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:bl"
              },
              "uniconfig-config:validation-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send validate RPC before commit RPC."
              },
              "whitelist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:wl"
              },
              "cli-topology:default-commit-error-patterns": {
                "title": "cli.translate.registry.errorcommitpatterns.DefaultCommitErrorPatterns",
                "properties": {
                  "commit-error-pattern": {
                    "type": "array",
                    "description": "Device specific commit error patterns.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Device specific list of commit error patterns. The following list\nof patterns is checked in the input after 'commit' command is sent."
              },
              "cli-topology:journal-level": {
                "$ref": "#/components/schemas/cli.topology.JournalLevel"
              },
              "uniconfig-config:sequence-read-active": {
                "type": "boolean",
                "description": "Forces reading of data sequentially when mounting device."
              },
              "keepalive-delay": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "",
                "format": "int32",
                "x-choice": "keepalive-strategy:keepalive"
              },
              "cli-topology:journal-size": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Size of the cli mountpoint jounral. Journal keeps track of executed commands and makes\nthem available for users/apps for debugging purposes. Value 0 disables journaling",
                "format": "int32"
              },
              "command-timeout": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Maximal time (in seconds) for command execution, if a command cannot be executed on\na device in this time, the execution is considered a failure",
                "format": "int32",
                "x-choice": "keepalive-strategy:lazy"
              },
              "uniconfig-config:uniconfig-native-enabled": {
                "type": "boolean",
                "description": ""
              },
              "cli-topology:port": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "",
                "format": "int32"
              },
              "cli-topology:parsing-engine": {
                "$ref": "#/components/schemas/cli.topology.ParsingEngine"
              },
              "username": {
                "type": "string",
                "description": "",
                "x-choice": "credentials:login-password"
              }
            },
            "description": "CLI node settings."
          },
          "netconf": {
            "title": "connection.manager.installnode.input.Netconf",
            "properties": {
              "concurrent-rpc-limit": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Limit of concurrent messages that can be send before reply messages are received.\nIf value <1 is provided, no limit will be enforced",
                "format": "int32",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "uniconfig-config:confirmed-commit-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
              },
              "max-reconnection-attempts": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "number",
                "description": "Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.\nThis is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts\nand for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.\nThis enables users using different amount of reconnects for initial attempts vs subsequent reconnects.",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "netconf-node-topology:tcp-only": {
                "type": "boolean",
                "description": ""
              },
              "streaming-session": {
                "type": "boolean",
                "description": "NETCONF session is created and optimized for receiving of NETCONF notifications\nfrom remote server.",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "netconf-node-topology:yang-module-capabilities": {
                "title": "netconf.node.topology.netconfnodeconnectionparameters.YangModuleCapabilities",
                "properties": {
                  "capability": {
                    "type": "array",
                    "description": "Set a list of capabilities to override capabilities provided in device's hello message.\nCan be used for devices that do not report any yang modules in their hello message",
                    "items": {
                      "type": "string"
                    }
                  },
                  "override": {
                    "type": "boolean",
                    "description": "Whether to override or merge this list of capabilities with capabilities from device"
                  }
                },
                "description": ""
              },
              "max-connection-attempts": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "number",
                "description": "Maximum number of connection retries. Non positive value or null is interpreted as infinity.",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "reconnect-on-changed-schema": {
                "type": "boolean",
                "description": "If it is set to 'true', NETCONF notifications are supported by device, and NETCONF\nnotifications are enabled ('enabled-notifications' flag), the connector would auto\ndisconnect/reconnect when schemas are changed in the remote device. The connector subscribes\n(right after connect) to base netconf notifications and listens\nfor netconf-capability-change notification",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "dry-run-journal-size": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that\nwould be executed when reading/writing some configuration. However the RPCs are not actually\nsent to the device",
                "format": "int32",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "flags": {
                "title": "netconf.node.topology.netconfparametersgroups.Flags",
                "properties": {
                  "streaming-session": {
                    "type": "boolean",
                    "description": "NETCONF session is created and optimized for receiving of NETCONF notifications\nfrom remote server."
                  },
                  "enabled-notifications": {
                    "type": "boolean",
                    "description": "If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will\nexpose NETCONF notification and subscription services."
                  },
                  "reconnect-on-changed-schema": {
                    "type": "boolean",
                    "description": "If it is set to 'true', NETCONF notifications are supported by device, and NETCONF\nnotifications are enabled ('enabled-notifications' flag), the connector would auto\ndisconnect/reconnect when schemas are changed in the remote device. The connector subscribes\n(right after connect) to base netconf notifications and listens\nfor netconf-capability-change notification"
                  },
                  "enabled-strict-parsing": {
                    "type": "boolean",
                    "description": "If this parameter is set to 'false', then parser should ignore unknown elements and not throw\nexception during parsing."
                  }
                },
                "description": "",
                "x-choice": "netconf-parameters:netconf-parameters-new-format"
              },
              "netconf-node-topology:port": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "",
                "format": "int32"
              },
              "netconf-node-topology:yang-library": {
                "title": "netconf.node.topology.netconfschemastorage.YangLibrary",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": ""
                  },
                  "yang-library-url": {
                    "type": "string",
                    "description": "Yang library to be plugged as additional source provider into the shared schema repository"
                  },
                  "username": {
                    "type": "string",
                    "description": ""
                  }
                },
                "description": ""
              },
              "netconf-node-topology:odl-hello-message-capabilities": {
                "title": "netconf.node.topology.netconfnodeconnectionparameters.OdlHelloMessageCapabilities",
                "properties": {
                  "capability": {
                    "type": "array",
                    "description": "Certain devices are non-accepting of ODL's hello message.  This allows specification of\na custom ODL hello message based on a list of supported capabilities.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": ""
              },
              "strict-parsing": {
                "type": "boolean",
                "description": "If this parameter is set to 'false', then parser should ignore unknown elements and not throw\nexception during parsing.",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "password": {
                "type": "string",
                "description": "",
                "x-choice": "credentials:login-password"
              },
              "enabled-notifications": {
                "type": "boolean",
                "description": "If it is set to 'true' and NETCONF device supports notifications, NETCONF mountpoint will\nexpose NETCONF notification and subscription services.",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "confirm-timeout": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "number",
                "description": "Timeout period in seconds to issued commit after confirmed-commit",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "sleep-factor": {
                "maximum": 922337203685477600,
                "minimum": -922337203685477600,
                "type": "integer",
                "description": "After each reconnection attempt, the delay between reconnection attempts is\nmultiplied by this factor. By default, it is set to 1.5. This means that the next\ndelay between attempts will be 3000 ms, then it will be 4500 ms, etc.",
                "format": "int32",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "uniconfig-config:crypto": {
                "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                "properties": {
                  "public-key-path": {
                    "type": "string",
                    "description": "Path to leaf containing public key in Base64 binary format."
                  },
                  "public-key-cipher-type": {
                    "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                  }
                },
                "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
              },
              "other-parameters": {
                "title": "netconf.node.topology.netconfparametersgroups.OtherParameters",
                "properties": {
                  "concurrent-rpc-limit": {
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer",
                    "description": "Limit of concurrent messages that can be send before reply messages are received.\nIf value <1 is provided, no limit will be enforced",
                    "format": "int32"
                  },
                  "dry-run-journal-size": {
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer",
                    "description": "Size of the DRY RUN netconf mountpoint journal. DRY RUN journal captures netconf RPCs that\nwould be executed when reading/writing some configuration. However the RPCs are not actually\nsent to the device",
                    "format": "int32"
                  },
                  "custom-connector-factory": {
                    "type": "string",
                    "description": "Specification of the custom NETCONF connector factory. For example,\n           if device doesn't support candidate data-store, this parameter\n           should be set to 'netconf-customization-alu-ignore-candidate' string."
                  },
                  "edit-config-test-option": {
                    "$ref": "#/components/schemas/netconf.node.topology.EditConfigTestOption"
                  }
                },
                "description": "",
                "x-choice": "netconf-parameters:netconf-parameters-new-format"
              },
              "uniconfig-config:install-uniconfig-node-enabled": {
                "type": "boolean",
                "description": ""
              },
              "netconf-node-topology:schema-cache-directory": {
                "type": "string",
                "description": "The destination schema repository for yang files relative to the cache directory.  This may be specified per netconf mount\nso that the loaded yang files are stored to a distinct directory to avoid potential conflict."
              },
              "between-attempts-timeout-millis": {
                "maximum": 65535,
                "minimum": 0,
                "type": "integer",
                "description": "Initial timeout in milliseconds to wait between connection attempts. Will be multiplied by sleep-factor with every additional attempt",
                "format": "int32",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "netconf-node-topology:pass-through": {
                "title": "netconf.node.topology.netconfnodeconnectionstatus.PassThrough",
                "properties": {},
                "description": "When the underlying node is connected, its NETCONF context\nis available verbatim under this container through the\nmount extension."
              },
              "netconf-subscriptions:stream": {
                "type": "array",
                "description": "List of available streams to which subscription can be created.",
                "items": {
                  "title": "netconf.subscriptions.streamslist.Stream",
                  "properties": {
                    "stop-time": {
                      "type": "string",
                      "description": "RFC5277: An optional parameter, <stopTime>, used with the optional replay feature to indicate the newest\nnotifications of interest. If <stopTime> is not present, the notifications will continue until the\nsubscription is terminated. Must be used with and be later than <startTime>. Values of <stopTime>\nin the future are valid."
                    },
                    "start-time": {
                      "type": "string",
                      "description": "RFC5277: A parameter, <startTime>, used to trigger the replay feature and indicate that the replay\nshould start at the time specified. If <startTime> is not present, this is not a replay subscription.\nIt is not valid to specify start times that are later than the current time. If the <startTime> specified\nis earlier than the log can support, the replay will begin with the earliest available notification."
                    },
                    "stream-name": {
                      "type": "string",
                      "description": "Identifier of the notification stream."
                    }
                  }
                }
              },
              "netconf-node-topology:non-module-capabilities": {
                "title": "netconf.node.topology.netconfnodeconnectionparameters.NonModuleCapabilities",
                "properties": {
                  "capability": {
                    "type": "array",
                    "description": "Set a list of non-module based capabilities to override or merge non-module capabilities\nprovided in device's hello message. Can be used for devices that do not report or\nincorrectly report non-module based capabilities in their hello message",
                    "items": {
                      "type": "string"
                    }
                  },
                  "override": {
                    "type": "boolean",
                    "description": "Whether to override or merge this list of non-module based capabilities with non-module\nbased capabilities from device"
                  }
                },
                "description": ""
              },
              "netconf-node-topology:schemaless": {
                "type": "boolean",
                "description": ""
              },
              "edit-config-test-option": {
                "$ref": "#/components/schemas/netconf.node.topology.EditConfigTestOption"
              },
              "uniconfig-config:admin-state": {
                "$ref": "#/components/schemas/uniconfig.config.AdminState"
              },
              "key-based": {
                "title": "netconf.node.topology.netconfnodecredentials.credentials.keyauth.KeyBased",
                "properties": {
                  "key-id": {
                    "type": "string",
                    "description": ""
                  },
                  "username": {
                    "type": "string",
                    "description": ""
                  }
                },
                "description": "",
                "x-choice": "credentials:key-auth"
              },
              "blacklist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are not invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:bl"
              },
              "uniconfig-config:validation-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send validate RPC before commit RPC."
              },
              "session-timers": {
                "title": "netconf.node.topology.netconfparametersgroups.SessionTimers",
                "properties": {
                  "keepalive-delay": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "number",
                    "description": "Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds\nIf a value <1 is provided, no keepalives will be sent"
                  },
                  "max-reconnection-attempts": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "number",
                    "description": "Maximum number of reconnect retries. Non positive value or null is interpreted as infinity.\nThis is an optional parameter. If set, max-connection-attempts will be used only once, for the first connection attempts\nand for any subsequent disconnect-connect cycles, max-reconnect-attempts will be used.\nThis enables users using different amount of reconnects for initial attempts vs subsequent reconnects."
                  },
                  "reconnenction-attempts-multiplier": {
                    "maximum": 922337203685477600,
                    "minimum": -922337203685477600,
                    "type": "integer",
                    "description": "After each reconnection attempt, the delay between reconnection attempts is\nmultiplied by this factor. By default, it is set to 1.5. This means that the next\ndelay between attempts will be 3000 ms, then it will be 4500 ms, etc.",
                    "format": "int32"
                  },
                  "confirm-commit-timeout": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "number",
                    "description": "Timeout period in seconds to issued commit after confirmed-commit"
                  },
                  "request-transaction-timeout": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "number",
                    "description": "Timeout in seconds for blocking operations within transactions."
                  },
                  "max-connection-attempts": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "number",
                    "description": "Maximum number of connection retries. Non positive value or null is interpreted as infinity."
                  },
                  "initial-connection-timeout": {
                    "maximum": 4294967295,
                    "minimum": 0,
                    "type": "number",
                    "description": "Specifies timeout in seconds after which connection must be established."
                  },
                  "between-attempts-timeout": {
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer",
                    "description": "Initial timeout in seconds to wait between connection attempts.\nWill be multiplied by reconenction-attempts-multiplier with every additional attempt",
                    "format": "int32"
                  }
                },
                "description": "",
                "x-choice": "netconf-parameters:netconf-parameters-new-format"
              },
              "whitelist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:wl"
              },
              "uniconfig-config:sequence-read-active": {
                "type": "boolean",
                "description": "Forces reading of data sequentially when mounting device."
              },
              "keepalive-delay": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "number",
                "description": "Netconf connector sends keepalive RPCs while the session is idle, this delay specifies the delay between keepalive RPC in seconds\nIf a value <1 is provided, no keepalives will be sent",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "netconf-node-topology:host": {
                "type": "string",
                "description": ""
              },
              "default-request-timeout-millis": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "number",
                "description": "Timeout in milliseconds for blocking operations within transactions.",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "connection-timeout-millis": {
                "maximum": 4294967295,
                "minimum": 0,
                "type": "number",
                "description": "Specifies timeout in milliseconds after which connection must be established.",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "login-password-unencrypted": {
                "title": "netconf.node.topology.netconfnodecredentials.credentials.loginpwunencrypted.LoginPasswordUnencrypted",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": ""
                  },
                  "username": {
                    "type": "string",
                    "description": ""
                  }
                },
                "description": "",
                "x-choice": "credentials:login-pw-unencrypted"
              },
              "customization-factory": {
                "type": "string",
                "description": "Specification of the custom NETCONF connector factory. For example,\nif device doesn't support candidate data-store, this parameter\nshould be set to 'netconf-customization-alu-ignore-candidate' string.",
                "x-choice": "netconf-parameters:netconf-parameters-old-format"
              },
              "login-password": {
                "title": "netconf.node.topology.netconfnodecredentials.credentials.loginpw.LoginPassword",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": ""
                  },
                  "username": {
                    "type": "string",
                    "description": ""
                  }
                },
                "description": "",
                "x-choice": "credentials:login-pw"
              },
              "uniconfig-config:uniconfig-native-enabled": {
                "type": "boolean",
                "description": ""
              },
              "username": {
                "type": "string",
                "description": "",
                "x-choice": "credentials:login-password"
              }
            },
            "description": "NETCONF node settings."
          },
          "sync-node": {
            "type": "boolean",
            "description": "Flag that can be used to disable device mounting and configuration syncing."
          },
          "gnmi": {
            "title": "connection.manager.installnode.input.Gnmi",
            "properties": {
              "uniconfig-config:sequence-read-active": {
                "type": "boolean",
                "description": "Forces reading of data sequentially when mounting device."
              },
              "uniconfig-config:confirmed-commit-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send confirmed commit RPC between validate RPC and confirming commit."
              },
              "uniconfig-config:admin-state": {
                "$ref": "#/components/schemas/uniconfig.config.AdminState"
              },
              "uniconfig-config:crypto": {
                "title": "uniconfig.config.uniconfigconfignodefields.Crypto",
                "properties": {
                  "public-key-path": {
                    "type": "string",
                    "description": "Path to leaf containing public key in Base64 binary format."
                  },
                  "public-key-cipher-type": {
                    "$ref": "#/components/schemas/uniconfig.config.PublicKeyCipherType"
                  }
                },
                "description": "Settings related to encryption of arbitrary leaves/leaf-list using public key that\nis read from device on specified path."
              },
              "blacklist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.bl.Blacklist",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are not invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:bl"
              },
              "uniconfig-config:validation-enabled": {
                "type": "boolean",
                "description": "Specifies whether to send validate RPC before commit RPC."
              },
              "uniconfig-config:uniconfig-native-enabled": {
                "type": "boolean",
                "description": ""
              },
              "uniconfig-config:install-uniconfig-node-enabled": {
                "type": "boolean",
                "description": ""
              },
              "whitelist": {
                "title": "uniconfig.config.uniconfigconfignodefields.nodes.wl.Whitelist",
                "properties": {
                  "path": {
                    "type": "array",
                    "description": "Only root schema nodes are supported. The path needs to be in URI format from RFC 8040.\ne.g. ietf-interfaces:interfaces where ietf-interfaces is YANG module name and interfaces is root\ncontainer.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "extension": {
                    "type": "array",
                    "description": "List of extensions that mark top level containers/lists.\nExample value: [\"common:hidden true\"]",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "description": "Reads which are invoked for sync-from-network and initial config read.",
                "x-choice": "nodes:wl"
              }
            },
            "description": "gNMI node settings."
          }
        },
        "description": ""
      },
      "connection.manager.installnode.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Message that described occured error during invocation of operation."
          },
          "status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "connection.manager.mountnode.Input": {
        "properties": {
          "node-id": {
            "type": "string",
            "description": "Node identifier of CLI/NETCONF node."
          },
          "connection-type": {
            "$ref": "#/components/schemas/connection.manager.ConnectionType"
          }
        },
        "description": ""
      },
      "connection.manager.mountnode.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Message that described occured error during invocation of operation."
          },
          "status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "connection.manager.uninstallmultiplenodes.Input": {
        "properties": {
          "nodes": {
            "type": "array",
            "description": "",
            "items": {
              "title": "connection.manager.uninstallmultiplenodesinputfields.Nodes",
              "properties": {
                "node-id": {
                  "type": "string",
                  "description": "Node identifier of CLI/NETCONF node."
                },
                "connection-type": {
                  "$ref": "#/components/schemas/connection.manager.ConnectionType"
                }
              }
            }
          }
        },
        "description": ""
      },
      "connection.manager.uninstallmultiplenodes.Output": {
        "properties": {
          "node-results": {
            "type": "array",
            "description": "",
            "items": {
              "title": "connection.manager.multiplenodesoutputfields.NodeResults",
              "properties": {
                "node-id": {
                  "type": "string",
                  "description": "Node identifier of CLI/NETCONF node."
                },
                "error-message": {
                  "type": "string",
                  "description": "Message that described occured error during invocation of operation on a specific node."
                },
                "status": {
                  "$ref": "#/components/schemas/frinx.types.OperationResultType"
                }
              }
            }
          }
        },
        "description": ""
      },
      "connection.manager.uninstallnode.Input": {
        "properties": {
          "node-id": {
            "type": "string",
            "description": "Node identifier of CLI/NETCONF node."
          },
          "connection-type": {
            "$ref": "#/components/schemas/connection.manager.ConnectionType"
          }
        },
        "description": ""
      },
      "connection.manager.uninstallnode.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Message that described occured error during invocation of operation."
          },
          "status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "connection.manager.unmountnode.Input": {
        "properties": {
          "node-id": {
            "type": "string",
            "description": "Node identifier of CLI/NETCONF node."
          },
          "connection-type": {
            "$ref": "#/components/schemas/connection.manager.ConnectionType"
          }
        },
        "description": ""
      },
      "connection.manager.unmountnode.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Message that described occured error during invocation of operation."
          },
          "status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "data.change.events.DataChangeScope": {
        "type": "string",
        "enum": [
          "BASE",
          "ONE",
          "SUBTREE"
        ]
      },
      "data.change.events.createdatachangesubscription.Input": {
        "properties": {
          "subtree-path": {
            "type": "string",
            "description": "Identifier of the subtree in the data-tree expressed as relative path."
          },
          "node-id": {
            "type": "string",
            "description": "Identifier of 'network-topology/topology/node' list entry."
          },
          "data-change-scope": {
            "$ref": "#/components/schemas/data.change.events.DataChangeScope"
          },
          "topology-id": {
            "type": "string",
            "description": "Identifier of 'network-topology/topology' list entry."
          }
        },
        "description": ""
      },
      "data.change.events.createdatachangesubscription.Output": {
        "properties": {
          "subscription-id": {
            "type": "string",
            "description": "Unique identifier of the subscription."
          }
        },
        "description": ""
      },
      "data.change.events.deletedatachangesubscription.Input": {
        "properties": {
          "subscription-id": {
            "type": "string",
            "description": "Unique identifier of the subscription."
          }
        },
        "description": ""
      },
      "data.change.events.showsubscriptiondata.Input": {
        "properties": {
          "subscription-id": {
            "type": "string",
            "description": "Unique identifier of the subscription."
          }
        },
        "description": ""
      },
      "data.change.events.showsubscriptiondata.Output": {
        "properties": {
          "subtree-path": {
            "type": "string",
            "description": "Identifier of the subtree in the data-tree expressed as relative path."
          },
          "node-id": {
            "type": "string",
            "description": "Identifier of 'network-topology/topology/node' list entry."
          },
          "data-change-scope": {
            "$ref": "#/components/schemas/data.change.events.DataChangeScope"
          },
          "topology-id": {
            "type": "string",
            "description": "Identifier of 'network-topology/topology' list entry."
          }
        },
        "description": ""
      },
      "device.discovery.discover.Input": {
        "properties": {
          "verify-host-reachability": {
            "type": "boolean",
            "description": "Check whether the host is reachable or not using ICMP protocol"
          },
          "tcp-port": {
            "type": "array",
            "description": "",
            "items": {
              "title": "device.discovery.inputport.TcpPort",
              "properties": {
                "end-port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:port-range-case"
                },
                "port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:scalar-case"
                },
                "start-port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:port-range-case"
                }
              }
            }
          },
          "address": {
            "type": "array",
            "description": "",
            "items": {
              "title": "device.discovery.inputaddress.Address",
              "properties": {
                "end-ipv6-address": {
                  "type": "string",
                  "description": "",
                  "x-choice": "type-of-address:ipv6-range-case"
                },
                "ip-address": {
                  "type": "string",
                  "description": "IP address in either IPv4 or IPv6 format, the syntax\nthen determines which version is used",
                  "x-choice": "type-of-address:ip-address-case"
                },
                "hostname": {
                  "type": "string",
                  "description": "Domain name",
                  "x-choice": "type-of-address:hostname-case"
                },
                "end-ipv4-address": {
                  "type": "string",
                  "description": "",
                  "x-choice": "type-of-address:ipv4-range-case"
                },
                "start-ipv4-address": {
                  "type": "string",
                  "description": "",
                  "x-choice": "type-of-address:ipv4-range-case"
                },
                "start-ipv6-address": {
                  "type": "string",
                  "description": "",
                  "x-choice": "type-of-address:ipv6-range-case"
                },
                "network": {
                  "type": "string",
                  "description": "IP address with a subnet mask either in IPv4 or IPv6 format,\nthe syntax then determines which version is used",
                  "x-choice": "type-of-address:network-case"
                }
              }
            }
          },
          "udp-port": {
            "type": "array",
            "description": "",
            "items": {
              "title": "device.discovery.inputport.UdpPort",
              "properties": {
                "end-port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:port-range-case"
                },
                "port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:scalar-case"
                },
                "start-port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "",
                  "format": "int32",
                  "x-choice": "type-of-port:port-range-case"
                }
              }
            }
          }
        },
        "description": ""
      },
      "device.discovery.discover.Output": {
        "properties": {
          "device": {
            "type": "array",
            "description": "",
            "items": {
              "title": "device.discovery.discoveryoutputfields.Device",
              "properties": {
                "host": {
                  "type": "string",
                  "description": "Host address either in IP (IPv4 or IPv6) format or in domain-name format"
                },
                "is-host-reachable": {
                  "type": "boolean",
                  "description": "If the host is reachable or not using ICMP protocol"
                },
                "available-tcp-ports": {
                  "type": "array",
                  "description": "All the available TCP ports",
                  "items": {
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "available-udp-ports": {
                  "type": "array",
                  "description": "All the available UDP ports",
                  "items": {
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "description": ""
      },
      "dryrun.manager.dryruncommit.Input": {
        "properties": {
          "do-rollback": {
            "type": "boolean",
            "description": "Controls whether to roll back successfully configured devices in case of failure.\nApplies when configuring multiple devices within a single COMMIT RPC.\nBy default, if N devices succeed, but the N+1 device fails,\nthose N devices will be rolled back unless this option is set to false.\nThe N+1 device will always be rolled back regardless of this option."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfignodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "dryrun.manager.dryruncommit.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "uniconfig.manager.commitoutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Result of configuration and rollback on the given node.\nRollback status is empty if rollback was not executed.",
                "items": {
                  "title": "uniconfig.manager.nodeconfigresults.NodeResult",
                  "properties": {
                    "configuration-status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    },
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "configuration": {
                      "type": "string",
                      "description": "Cli commands or netconf RPCs that needs to be executed\non node to reach intended configuration state"
                    },
                    "rollback-status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    }
                  }
                }
              }
            },
            "description": "Result of configuration and rollback on each configured network element."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "frinx.types.DataTreeOperation": {
        "type": "string",
        "enum": [
          "merge",
          "replace",
          "remove"
        ]
      },
      "frinx.types.ErrorType": {
        "type": "string",
        "enum": [
          "no-connection",
          "device-processing-error",
          "uniconfig-error",
          "cli-error",
          "netconf-error"
        ]
      },
      "frinx.types.OperationResultType": {
        "type": "string",
        "enum": [
          "complete",
          "fail"
        ]
      },
      "journal.clearjournal.Output": {
        "properties": {
          "journal": {
            "type": "string",
            "description": ""
          }
        },
        "description": ""
      },
      "journal.readjournal.Output": {
        "properties": {
          "journal": {
            "type": "string",
            "description": ""
          }
        },
        "description": ""
      },
      "logging.RpcStatus": {
        "type": "string",
        "enum": [
          "complete",
          "failed"
        ]
      },
      "logging.disabledefaultdevicelogging.Input": {
        "properties": {
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.disabledefaultdevicelogging.Output": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Information message about state of operation."
          },
          "status": {
            "$ref": "#/components/schemas/logging.RpcStatus"
          }
        },
        "description": ""
      },
      "logging.disabledevicelogging.Input": {
        "properties": {
          "device-list": {
            "type": "array",
            "description": "List of devices.",
            "items": {
              "type": "string"
            }
          },
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.disabledevicelogging.Output": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Information message about state of operation."
          },
          "status": {
            "$ref": "#/components/schemas/logging.RpcStatus"
          }
        },
        "description": ""
      },
      "logging.disablelogging.Input": {
        "properties": {
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.disablelogging.Output": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Information message about state of operation."
          },
          "status": {
            "$ref": "#/components/schemas/logging.RpcStatus"
          }
        },
        "description": ""
      },
      "logging.enabledefaultdevicelogging.Input": {
        "properties": {
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.enabledefaultdevicelogging.Output": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Information message about state of operation."
          },
          "status": {
            "$ref": "#/components/schemas/logging.RpcStatus"
          }
        },
        "description": ""
      },
      "logging.enabledevicelogging.Input": {
        "properties": {
          "device-list": {
            "type": "array",
            "description": "List of devices.",
            "items": {
              "type": "string"
            }
          },
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.enabledevicelogging.Output": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Information message about state of operation."
          },
          "status": {
            "$ref": "#/components/schemas/logging.RpcStatus"
          }
        },
        "description": ""
      },
      "logging.enablelogging.Input": {
        "properties": {
          "broker-identifier": {
            "type": "string",
            "description": "Logging broker identifier."
          }
        },
        "description": ""
      },
      "logging.enablelogging.Output": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Information message about state of operation."
          },
          "status": {
            "$ref": "#/components/schemas/logging.RpcStatus"
          }
        },
        "description": ""
      },
      "logging.setglobalhiddentypes.Input": {
        "properties": {
          "hidden-types": {
            "type": "array",
            "description": "Types filtered and hidden at logger ouptut.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "logging.setglobalhiddentypes.Output": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Information message about state of operation."
          },
          "status": {
            "$ref": "#/components/schemas/logging.RpcStatus"
          }
        },
        "description": ""
      },
      "netconf.keystore.addkeystoreentry.Input": {
        "properties": {
          "key-credential": {
            "type": "array",
            "description": "",
            "items": {
              "title": "netconf.keystore.keystoreentry.KeyCredential",
              "properties": {
                "passphrase": {
                  "type": "string",
                  "description": "If the provided key is encrypted by a passphrase this needs to be included. Leave empty\nif the key does not have a passphrase.\nDO NOT write write this directly into the datastore, use the provided rpc's as these will\nencrypt the passhprase before the entry is written into the datastore."
                },
                "key-id": {
                  "type": "string",
                  "description": ""
                },
                "private-key": {
                  "type": "string",
                  "description": "Base64 encoded private key that should be used for authentication with a netconf device.\nDo not include a public key as that is calculated from the private key.\nDO NOT write this directly into the datastore, use the provided rpc's as these will\nencrypt the key before the entry is written into the datastore."
                }
              }
            }
          }
        },
        "description": ""
      },
      "netconf.keystore.addprivatekey.Input": {
        "properties": {
          "private-key": {
            "type": "array",
            "description": "A private key.",
            "items": {
              "title": "netconf.keystore.privatekeys.PrivateKey",
              "properties": {
                "name": {
                  "type": "string",
                  "description": ""
                },
                "data": {
                  "type": "string",
                  "description": "Base64 encoded private key."
                },
                "certificate-chain": {
                  "type": "array",
                  "description": "A certificate chain for this public key. Each certificate is an X.509 v3 certificate\nstructure as specified by RFC5280, encoded using the Base64 format.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "description": ""
      },
      "netconf.keystore.addtrustedcertificate.Input": {
        "properties": {
          "trusted-certificate": {
            "type": "array",
            "description": "A list of trusted certificate. These cerfitifcates can be used by a server to\nauthenticate clients, or by clients to authenticate servers.",
            "items": {
              "title": "netconf.keystore.trustedcertificates.TrustedCertificate",
              "properties": {
                "certificate": {
                  "type": "string",
                  "description": "An X.509 v3 certificate structure as specified by RFC5280, encoded using\nthe Base64 format."
                },
                "name": {
                  "type": "string",
                  "description": ""
                }
              }
            }
          }
        },
        "description": ""
      },
      "netconf.keystore.removekeystoreentry.Input": {
        "properties": {
          "key-id": {
            "type": "array",
            "description": "",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "netconf.keystore.removeprivatekey.Input": {
        "properties": {
          "name": {
            "type": "array",
            "description": "",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "netconf.keystore.removetrustedcertificate.Input": {
        "properties": {
          "name": {
            "type": "array",
            "description": "",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "netconf.node.topology.EditConfigTestOption": {
        "type": "string",
        "enum": [
          "set",
          "test-only",
          "test-then-set"
        ]
      },
      "notifications.createsubscription.Input": {
        "properties": {
          "filter": {
            "type": "string",
            "description": "An optional parameter that indicates which subset of all\npossible events is of interest. The format of this\nparameter is the same as that of the filter parameter\nin the NETCONF protocol operations. If not present,\nall events not precluded by other parameters will\nbe sent."
          },
          "stopTime": {
            "type": "string",
            "description": "An optional parameter used with the optional replay\nfeature to indicate the newest notifications of\ninterest. If stop time is not present, the notifications\nwill continue until the subscription is terminated.\nMust be used with startTime."
          },
          "startTime": {
            "type": "string",
            "description": "A parameter used to trigger the replay feature and\nindicates that the replay should start at the time\nspecified. If start time is not present, this is not a\nreplay subscription."
          },
          "stream": {
            "type": "string",
            "description": "An optional parameter that indicates which stream of events\nis of interest. If not present, then events in the default\nNETCONF stream will be sent."
          }
        },
        "description": ""
      },
      "restconf.logging.HttpMethod": {
        "type": "string",
        "enum": [
          "GET",
          "HEAD",
          "POST",
          "PUT",
          "DELETE",
          "TRACE",
          "OPTIONS",
          "CONNECT",
          "PATCH"
        ]
      },
      "restconf.logging.sethiddenhttpheaders.Input": {
        "properties": {
          "hidden-http-headers": {
            "type": "array",
            "description": "List of HTTP headers (names of the headers) which content is hidden in the logs.\nNames of the HTTP headers are not case-sensitive.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      },
      "restconf.logging.sethiddenhttpheaders.Output": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Information message about state of operation."
          },
          "status": {
            "$ref": "#/components/schemas/logging.RpcStatus"
          }
        },
        "description": ""
      },
      "restconf.logging.sethiddenhttpmethods.Input": {
        "properties": {
          "hidden-http-methods": {
            "type": "array",
            "description": "HTTP requests (and associated HTTP responses) are not logged if request's HTTP method is set\nto one of the methods in this list.",
            "items": {
              "$ref": "#/components/schemas/restconf.logging.HttpMethod"
            }
          }
        },
        "description": ""
      },
      "restconf.logging.sethiddenhttpmethods.Output": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Information message about state of operation."
          },
          "status": {
            "$ref": "#/components/schemas/logging.RpcStatus"
          }
        },
        "description": ""
      },
      "schema.resources.RepositoryCreationStatus": {
        "type": "string",
        "enum": [
          "success",
          "failed"
        ]
      },
      "schema.resources.registerrepository.Input": {
        "properties": {
          "repository-name": {
            "type": "string",
            "description": "Name of the schema repository / directory that is used for persistence of YANG artifacts."
          }
        },
        "description": ""
      },
      "schema.resources.registerrepository.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "The cause of the failure."
          },
          "status": {
            "$ref": "#/components/schemas/schema.resources.RepositoryCreationStatus"
          }
        },
        "description": ""
      },
      "snapshot.manager.SnapshotsMetadata": {
        "properties": {
          "snapshot": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/snapshot.manager.snapshotsmetadata.Snapshot"
            }
          }
        },
        "description": ""
      },
      "snapshot.manager.createsnapshot.Input": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of snapshot."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfignodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "snapshot.manager.createsnapshot.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "snapshot.manager.createsnapshotoutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Result of create-snapshot on actual uniconfig node.",
                "items": {
                  "title": "snapshot.manager.nodecreatesnapshotresults.NodeResult",
                  "properties": {
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              }
            },
            "description": "Individual result of given nodes."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "snapshot.manager.deletesnapshot.Input": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of snapshot."
          }
        },
        "description": ""
      },
      "snapshot.manager.deletesnapshot.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "snapshot.manager.replaceconfigwithsnapshot.Input": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of snapshot."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfignodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "snapshot.manager.replaceconfigwithsnapshot.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "uniconfig.manager.replaceconfigwithoperationaloutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Result of replace-config-with-operational on actual uniconfig node.",
                "items": {
                  "title": "uniconfig.manager.nodereplaceconfigwithoperationalresults.NodeResult",
                  "properties": {
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              }
            },
            "description": "Individual result of replace-config-with-operational or replace-config-with-snapshot\nfor given nodes."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "snapshot.manager.snapshotsmetadata.Snapshot": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of snapshot."
          },
          "nodes": {
            "type": "array",
            "description": "List of nodes that are part of the snapshot.",
            "items": {
              "type": "string"
            }
          },
          "creation-time": {
            "type": "string",
            "description": "Time when the snapshot was created"
          }
        },
        "description": ""
      },
      "subtree.manager.Datastore": {
        "type": "string",
        "enum": [
          "CONFIGURATION",
          "OPERATIONAL"
        ]
      },
      "subtree.manager.Operation": {
        "type": "string",
        "enum": [
          "merge",
          "replace"
        ]
      },
      "subtree.manager.SourceDatastore": {
        "type": "string",
        "enum": [
          "CONFIGURATION",
          "OPERATIONAL"
        ]
      },
      "subtree.manager.TargetDatastore": {
        "type": "string",
        "enum": [
          "CONFIGURATION",
          "OPERATIONAL"
        ]
      },
      "subtree.manager.bulkedit.Input": {
        "properties": {
          "node-id": {
            "type": "array",
            "description": "List of nodes representing target nodes for list of modifications.",
            "items": {
              "type": "string"
            }
          },
          "topology-id": {
            "type": "string",
            "description": "Identifier of the topology which contains target nodes."
          },
          "edit": {
            "type": "array",
            "description": "List of intended modifications.",
            "items": {
              "title": "subtree.manager.bulkeditinputfields.Edit",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "Path to modified subtree. Path must be complaint to RFC-8040 and relative\nto parent top-level node 'configuration' container."
                },
                "data": {
                  "type": "string",
                  "description": "JSON-formatted subtree representing applied subtree configuration."
                },
                "operation": {
                  "$ref": "#/components/schemas/frinx.types.DataTreeOperation"
                }
              }
            }
          }
        },
        "description": ""
      },
      "subtree.manager.bulkedit.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-result": {
            "type": "array",
            "description": "List of target nodes with results.",
            "items": {
              "title": "subtree.manager.bulkeditoutputfields.NodeResult",
              "properties": {
                "node-id": {
                  "type": "string",
                  "description": ""
                },
                "error-type": {
                  "$ref": "#/components/schemas/frinx.types.ErrorType"
                },
                "error-message": {
                  "type": "string",
                  "description": "Error message describing cause of error."
                },
                "status": {
                  "$ref": "#/components/schemas/frinx.types.OperationResultType"
                }
              }
            }
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "subtree.manager.calculatesubtreediff.Input": {
        "properties": {
          "source-datastore": {
            "$ref": "#/components/schemas/subtree.manager.SourceDatastore"
          },
          "target-datastore": {
            "$ref": "#/components/schemas/subtree.manager.TargetDatastore"
          },
          "target-path": {
            "type": "string",
            "description": "Target path YIID."
          },
          "source-path": {
            "type": "string",
            "description": "Source path YIID."
          }
        },
        "description": ""
      },
      "subtree.manager.calculatesubtreediff.Output": {
        "properties": {
          "created-data": {
            "type": "array",
            "description": "Created intended configuration against actual.",
            "items": {
              "title": "subtree.manager.createddata.CreatedData",
              "properties": {
                "data": {
                  "type": "string",
                  "description": ""
                },
                "path": {
                  "type": "string",
                  "description": "Instance-identifier of created data node."
                }
              }
            }
          },
          "updated-data": {
            "type": "array",
            "description": "Updated intended configuration against actual.",
            "items": {
              "title": "subtree.manager.updateddata.UpdatedData",
              "properties": {
                "path-actual": {
                  "type": "string",
                  "description": "Instance-identifier of updated data node."
                },
                "path-intended": {
                  "type": "string",
                  "description": "Instance-identifier of updated data node."
                },
                "data-intended": {
                  "type": "string",
                  "description": ""
                },
                "data-actual": {
                  "type": "string",
                  "description": ""
                }
              }
            }
          },
          "error-message": {
            "type": "string",
            "description": "Error message describing cause of error."
          },
          "source-path": {
            "type": "string",
            "description": "Source path to data which is put/merged under target nodes."
          },
          "deleted-data": {
            "type": "array",
            "description": "Removed intended configuration against actual.",
            "items": {
              "title": "subtree.manager.deleteddata.DeletedData",
              "properties": {
                "data": {
                  "type": "string",
                  "description": ""
                },
                "path": {
                  "type": "string",
                  "description": "Instance-identifier of deleted data node."
                }
              }
            }
          },
          "error-type": {
            "$ref": "#/components/schemas/frinx.types.ErrorType"
          },
          "target-path": {
            "type": "string",
            "description": "Target path under which data from source paths is put/merged."
          },
          "status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "subtree.manager.calculatesubtreegitlikediff.Input": {
        "properties": {
          "source-datastore": {
            "$ref": "#/components/schemas/subtree.manager.SourceDatastore"
          },
          "target-datastore": {
            "$ref": "#/components/schemas/subtree.manager.TargetDatastore"
          },
          "target-path": {
            "type": "string",
            "description": "Target path YIID."
          },
          "source-path": {
            "type": "string",
            "description": "Source path YIID."
          }
        },
        "description": ""
      },
      "subtree.manager.calculatesubtreegitlikediff.Output": {
        "properties": {
          "changes": {
            "type": "array",
            "description": "Result of diff between source and target YIID paths in a git like style.",
            "items": {
              "title": "subtree.manager.subtreegitlikediffoutput.Changes",
              "properties": {
                "data": {
                  "type": "string",
                  "description": "Result of the changes in a git like style."
                },
                "target-path": {
                  "type": "string",
                  "description": "Instance-identifier of updated data node showing the relative path."
                },
                "source-path": {
                  "type": "string",
                  "description": "Instance-identifier of updated data node showing the relative path."
                },
                "status": {
                  "$ref": "#/components/schemas/frinx.types.OperationResultType"
                }
              }
            }
          },
          "error-type": {
            "$ref": "#/components/schemas/frinx.types.ErrorType"
          },
          "error-message": {
            "type": "string",
            "description": "Error message describing cause of error."
          },
          "status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "subtree.manager.copymanytoone.Input": {
        "properties": {
          "source-paths": {
            "type": "array",
            "description": "Source paths to data which is put/merged under target nodes.",
            "items": {
              "type": "string"
            }
          },
          "source-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "target-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "target-path": {
            "type": "string",
            "description": "Target path under which data from source paths is put/merged."
          },
          "operation": {
            "$ref": "#/components/schemas/subtree.manager.Operation"
          }
        },
        "description": ""
      },
      "subtree.manager.copymanytoone.Output": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          },
          "error-message": {
            "type": "string",
            "description": "Error message describing operation failure."
          }
        },
        "description": ""
      },
      "subtree.manager.copyonetomany.Input": {
        "properties": {
          "source-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "target-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "operation": {
            "$ref": "#/components/schemas/subtree.manager.Operation"
          },
          "target-paths": {
            "type": "array",
            "description": "Target paths under which data from source paths is put/merged.",
            "items": {
              "type": "string"
            }
          },
          "source-path": {
            "type": "string",
            "description": "Source path to data which is put/merged under target nodes."
          }
        },
        "description": ""
      },
      "subtree.manager.copyonetomany.Output": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          },
          "error-message": {
            "type": "string",
            "description": "Error message describing operation failure."
          }
        },
        "description": ""
      },
      "subtree.manager.copyonetoone.Input": {
        "properties": {
          "source-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "target-datastore": {
            "$ref": "#/components/schemas/subtree.manager.Datastore"
          },
          "target-path": {
            "type": "string",
            "description": "Target path under which data from source paths is put/merged."
          },
          "operation": {
            "$ref": "#/components/schemas/subtree.manager.Operation"
          },
          "source-path": {
            "type": "string",
            "description": "Source path to data which is put/merged under target nodes."
          }
        },
        "description": ""
      },
      "subtree.manager.copyonetoone.Output": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          },
          "error-message": {
            "type": "string",
            "description": "Error message describing operation failure."
          }
        },
        "description": ""
      },
      "template.manager.applytemplate.Input": {
        "properties": {
          "template-node-id": {
            "type": "string",
            "description": "Identifier of the template."
          },
          "uniconfig-node": {
            "type": "array",
            "description": "",
            "items": {
              "title": "template.manager.applytemplateinputfields.UniconfigNode",
              "properties": {
                "uniconfig-node-id": {
                  "type": "string",
                  "description": "Identifier of the target Uniconfig node."
                },
                "variable": {
                  "type": "array",
                  "description": "List of variables with associated values.",
                  "items": {
                    "title": "template.manager.applytemplateinputfields.uniconfignode.Variable",
                    "properties": {
                      "leaf-list-values": {
                        "type": "array",
                        "description": "List of values that can be applied to the leaf-list.",
                        "items": {
                          "type": "string"
                        },
                        "x-choice": "type:leaf-list-values"
                      },
                      "typed-leaf-values": {
                        "type": "array",
                        "description": "",
                        "items": {
                          "title": "template.manager.applytemplateinputfields.uniconfignode.variable.type.typedleafvalues.TypedLeafValues",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Type qualifier for this value.\nUsed in case the same variable is used under different types"
                            },
                            "leaf-value": {
                              "type": "string",
                              "description": "Value that can be applied to leaf.",
                              "x-choice": "value:typed-leaf-value"
                            },
                            "leaf-list-values": {
                              "type": "array",
                              "description": "List of values that can be applied to the leaf-list.",
                              "items": {
                                "type": "string"
                              },
                              "x-choice": "value:typed-leaf-list-values"
                            }
                          }
                        },
                        "x-choice": "type:typed-leaf-values"
                      },
                      "leaf-value": {
                        "type": "string",
                        "description": "Value that can be applied to leaf.",
                        "x-choice": "type:leaf-value"
                      },
                      "variable-id": {
                        "type": "string",
                        "description": "Variable identifier."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": ""
      },
      "template.manager.applytemplate.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-result": {
            "type": "array",
            "description": "RPC results per target Uniconfig node to which template is applied.",
            "items": {
              "title": "template.manager.applytemplateoutputfields.NodeResult",
              "properties": {
                "node-id": {
                  "type": "string",
                  "description": ""
                },
                "error-type": {
                  "$ref": "#/components/schemas/frinx.types.ErrorType"
                },
                "error-message": {
                  "type": "string",
                  "description": "Error message describing cause of error."
                },
                "status": {
                  "$ref": "#/components/schemas/frinx.types.OperationResultType"
                }
              }
            }
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "template.manager.createmultipletemplates.Input": {
        "properties": {
          "templates": {
            "type": "array",
            "description": "",
            "items": {
              "title": "template.manager.createmultipletemplatesinputfields.Templates",
              "properties": {
                "yang-repository": {
                  "type": "string",
                  "description": "Name of yang-repository used for parsing of template configuration.\nIt contains identifier of the YANG schema repository."
                },
                "template-configuration": {
                  "type": "string",
                  "description": "Template configuration without wrapping 'configuration' element\n(only content of template)."
                },
                "template-name": {
                  "type": "string",
                  "description": "Identifier of the template."
                }
              }
            }
          }
        },
        "description": ""
      },
      "template.manager.createmultipletemplates.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-result": {
            "type": "array",
            "description": "RPC results per target template node.",
            "items": {
              "title": "template.manager.createmultipletemplatesoutputfields.NodeResult",
              "properties": {
                "node-id": {
                  "type": "string",
                  "description": ""
                },
                "error-type": {
                  "$ref": "#/components/schemas/frinx.types.ErrorType"
                },
                "error-message": {
                  "type": "string",
                  "description": "Error message describing cause of error."
                },
                "status": {
                  "$ref": "#/components/schemas/frinx.types.OperationResultType"
                }
              }
            }
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "template.manager.gettemplateinfo.Input": {
        "properties": {
          "template-node-id": {
            "type": "string",
            "description": "Identifier of the template."
          }
        },
        "description": ""
      },
      "template.manager.gettemplateinfo.Output": {
        "properties": {
          "variables": {
            "title": "template.manager.gettemplateinfooutputfields.Variables",
            "properties": {
              "variable": {
                "type": "array",
                "description": "",
                "items": {
                  "title": "template.manager.gettemplateinfooutputfields.variables.Variable",
                  "properties": {
                    "base-types": {
                      "title": "template.manager.gettemplateinfooutputfields.variables.variable.BaseTypes",
                      "properties": {
                        "base-type": {
                          "type": "array",
                          "description": "",
                          "items": {
                            "title": "template.manager.gettemplateinfooutputfields.variables.variable.basetypes.BaseType",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": ""
                              },
                              "constraints": {
                                "type": "array",
                                "description": "",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "description": ""
                    },
                    "variable-name": {
                      "type": "string",
                      "description": ""
                    },
                    "type": {
                      "type": "string",
                      "description": ""
                    },
                    "paths": {
                      "title": "template.manager.gettemplateinfooutputfields.variables.variable.Paths",
                      "properties": {
                        "path": {
                          "type": "array",
                          "description": "",
                          "items": {
                            "title": "template.manager.gettemplateinfooutputfields.variables.variable.paths.Path",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": ""
                              },
                              "path-description": {
                                "type": "string",
                                "description": ""
                              },
                              "default-value": {
                                "type": "string",
                                "description": ""
                              }
                            }
                          }
                        }
                      },
                      "description": ""
                    },
                    "type-description": {
                      "type": "string",
                      "description": ""
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "template.manager.upgradetemplate.Input": {
        "properties": {
          "yang-repository": {
            "type": "string",
            "description": "Name of yang-repository used for upgrading of templates.\nIt contains identifier of the YANG schema repository.\nDefault value is latest configured YANG repository."
          },
          "upgraded-template-name": {
            "type": "string",
            "description": "Identifier of the upgraded template. Default value is input 'template-name'."
          },
          "template-name": {
            "type": "string",
            "description": "Identifier of the template."
          }
        },
        "description": ""
      },
      "transaction.log.revertchanges.Input": {
        "properties": {
          "ignore-non-existing-nodes": {
            "type": "boolean",
            "description": "Controls whether to ignore non-existing target uniconfig nodes. By default, if the\ntarget-uuids-fields contains a transaction id for a non-existing node, then RPC fails."
          },
          "target-transactions": {
            "title": "transaction.log.targetuuidsfields.TargetTransactions",
            "properties": {
              "transaction": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "transaction.log.revertchanges.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "revert-output": {
            "title": "transaction.log.revertoutputfields.RevertOutput",
            "properties": {
              "result": {
                "type": "array",
                "description": "Result of reverted changes.",
                "items": {
                  "title": "transaction.log.revertresults.Result",
                  "properties": {
                    "transaction-id": {
                      "type": "string",
                      "description": "Transaction identifier."
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              }
            },
            "description": "Results of reverted changes."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "uniconfig.config.AdminState": {
        "type": "string",
        "enum": [
          "locked",
          "unlocked",
          "southbound_locked"
        ]
      },
      "uniconfig.config.PublicKeyCipherType": {
        "type": "string",
        "enum": [
          "RSA",
          "CURVE25519",
          "ECDSA"
        ]
      },
      "uniconfig.manager.calculatediff.Input": {
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfigunistorenodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.calculatediff.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "uniconfig.manager.calculatediffoutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Differences between intended and actual uniconfig node.",
                "items": {
                  "title": "uniconfig.manager.nodecalculatediffresults.NodeResult",
                  "properties": {
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "created-data": {
                      "type": "array",
                      "description": "Created intended configuration against actual.",
                      "items": {
                        "title": "uniconfig.manager.nodecalculatediffresults.noderesult.CreatedData",
                        "properties": {
                          "data": {
                            "type": "string",
                            "description": ""
                          },
                          "path": {
                            "type": "string",
                            "description": "Instance-identifier of created data node."
                          }
                        }
                      }
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "updated-data": {
                      "type": "array",
                      "description": "Updated intended configuration against actual.",
                      "items": {
                        "title": "uniconfig.manager.nodecalculatediffresults.noderesult.UpdatedData",
                        "properties": {
                          "path": {
                            "type": "string",
                            "description": "Instance-identifier of updated data node."
                          },
                          "data-intended": {
                            "type": "string",
                            "description": ""
                          },
                          "data-actual": {
                            "type": "string",
                            "description": ""
                          }
                        }
                      }
                    },
                    "deleted-data": {
                      "type": "array",
                      "description": "Removed intended configuration against actual.",
                      "items": {
                        "title": "uniconfig.manager.nodecalculatediffresults.noderesult.DeletedData",
                        "properties": {
                          "data": {
                            "type": "string",
                            "description": ""
                          },
                          "path": {
                            "type": "string",
                            "description": "Instance-identifier of deleted data node."
                          }
                        }
                      }
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    },
                    "reordered-lists": {
                      "type": "array",
                      "description": "Reordered intended list against actual.",
                      "items": {
                        "title": "uniconfig.manager.nodecalculatediffresults.noderesult.ReorderedLists",
                        "properties": {
                          "path": {
                            "type": "string",
                            "description": "Instance-identifier of reordered list."
                          },
                          "intended-list-keys": {
                            "type": "string",
                            "description": ""
                          },
                          "actual-list-keys": {
                            "type": "string",
                            "description": ""
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "Individual result of calculate-diff for given nodes."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "uniconfig.manager.calculategitlikediff.Input": {
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfigunistorenodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.calculategitlikediff.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "uniconfig.manager.calculategitlikediffoutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Differences between intended and actual uniconfig node in a git like style.",
                "items": {
                  "title": "uniconfig.manager.nodecalculategitlikediffresults.NodeResult",
                  "properties": {
                    "changes": {
                      "type": "array",
                      "description": "All changes that happened between intended and actual uniconfig node",
                      "items": {
                        "title": "uniconfig.manager.nodechanges.Changes",
                        "properties": {
                          "data": {
                            "type": "string",
                            "description": "Changes on the specified path in a git like style."
                          },
                          "path": {
                            "type": "string",
                            "description": "Instance-identifier of updated data node."
                          }
                        }
                      }
                    },
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              }
            },
            "description": "Individual result of calculate-diff for given nodes."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "uniconfig.manager.checkedcommit.Input": {
        "properties": {
          "do-rollback": {
            "type": "boolean",
            "description": "Controls whether to roll back successfully configured devices in case of failure.\nApplies when configuring multiple devices within a single COMMIT RPC.\nBy default, if N devices succeed, but the N+1 device fails,\nthose N devices will be rolled back unless this option is set to false.\nThe N+1 device will always be rolled back regardless of this option."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfigunistorenodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.checkedcommit.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "uniconfig.manager.commitoutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Result of configuration and rollback on the given node.\nRollback status is empty if rollback was not executed.",
                "items": {
                  "title": "uniconfig.manager.nodeconfigresults.NodeResult",
                  "properties": {
                    "configuration-status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    },
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "configuration": {
                      "type": "string",
                      "description": "Cli commands or netconf RPCs that needs to be executed\non node to reach intended configuration state"
                    },
                    "rollback-status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    }
                  }
                }
              }
            },
            "description": "Result of configuration and rollback on each configured network element."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "uniconfig.manager.commit.Input": {
        "properties": {
          "do-confirmed-commit": {
            "type": "boolean",
            "description": "Option to enable/disable confirmed-commit at commit. Default value is true - confirmed-commit"
          },
          "do-rollback": {
            "type": "boolean",
            "description": "Controls whether to roll back successfully configured devices in case of failure.\nApplies when configuring multiple devices within a single COMMIT RPC.\nBy default, if N devices succeed, but the N+1 device fails,\nthose N devices will be rolled back unless this option is set to false.\nThe N+1 device will always be rolled back regardless of this option."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetnodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          },
          "do-validate": {
            "type": "boolean",
            "description": "Option to enable/disable validation at commit. Default value is true - validate"
          }
        },
        "description": ""
      },
      "uniconfig.manager.commit.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "uniconfig.manager.commitoutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Result of configuration and rollback on the given node.\nRollback status is empty if rollback was not executed.",
                "items": {
                  "title": "uniconfig.manager.nodeconfigresults.NodeResult",
                  "properties": {
                    "configuration-status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    },
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "configuration": {
                      "type": "string",
                      "description": "Cli commands or netconf RPCs that needs to be executed\non node to reach intended configuration state"
                    },
                    "rollback-status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    }
                  }
                }
              }
            },
            "description": "Result of configuration and rollback on each configured network element."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "uniconfig.manager.health.Output": {
        "properties": {
          "message": {
            "type": "string",
            "description": ""
          },
          "healthy": {
            "type": "boolean",
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.isinsync.Input": {
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfignodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.isinsync.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "uniconfig.manager.isinsyncoutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Result of is-in-sync operation on the given node.",
                "items": {
                  "title": "uniconfig.manager.nodeisinsyncresults.NodeResult",
                  "properties": {
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "is-in-sync": {
                      "type": "boolean",
                      "description": ""
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              }
            },
            "description": "Result of checking if network elements are in-sync with operational datastore."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "uniconfig.manager.replaceconfigwithoperational.Input": {
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfigunistorenodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.replaceconfigwithoperational.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "uniconfig.manager.replaceconfigwithoperationaloutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Result of replace-config-with-operational on actual uniconfig node.",
                "items": {
                  "title": "uniconfig.manager.nodereplaceconfigwithoperationalresults.NodeResult",
                  "properties": {
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              }
            },
            "description": "Individual result of replace-config-with-operational or replace-config-with-snapshot\nfor given nodes."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "uniconfig.manager.syncfromnetwork.Input": {
        "properties": {
          "check-timestamp": {
            "type": "boolean",
            "description": "Perform timestamp comparison(last known to Uniconfig vs current timestamp on device)\nbefore loading all configuration from a device."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfignodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          },
          "finish-install": {
            "type": "boolean",
            "description": "If this sync should mount devices and sync config for nodes that were installed without sync."
          }
        },
        "description": ""
      },
      "uniconfig.manager.syncfromnetwork.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "uniconfig.manager.syncfromnetworkoutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Result of synchronization of configuration from network element\nto actual uniconfig node.",
                "items": {
                  "title": "uniconfig.manager.nodesyncresults.NodeResult",
                  "properties": {
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              }
            },
            "description": "Individual result of sync for given nodes."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "uniconfig.manager.synctonetwork.Input": {
        "properties": {
          "check-timestamp": {
            "type": "boolean",
            "description": "Perform timestamp comparison(last known to Uniconfig vs current timestamp on device)\nbefore loading all configuration from a device."
          },
          "do-validate": {
            "type": "boolean",
            "description": "Option to enable/disable validation at commit. Default value is true - validate"
          },
          "do-confirmed-commit": {
            "type": "boolean",
            "description": "Option to enable/disable confirmed-commit at commit. Default value is true - confirmed-commit"
          },
          "do-rollback": {
            "type": "boolean",
            "description": "Controls whether to roll back successfully configured devices in case of failure.\nApplies when configuring multiple devices within a single COMMIT RPC.\nBy default, if N devices succeed, but the N+1 device fails,\nthose N devices will be rolled back unless this option is set to false.\nThe N+1 device will always be rolled back regardless of this option."
          },
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfignodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          },
          "finish-install": {
            "type": "boolean",
            "description": "If this sync should mount devices and sync config for nodes that were installed without sync."
          }
        },
        "description": ""
      },
      "uniconfig.manager.synctonetwork.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "uniconfig.manager.synctonetworkoutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Result of synchronization of configuration to network element\nfrom actual uniconfig node.",
                "items": {
                  "title": "uniconfig.manager.nodesynctonetworkresults.NodeResult",
                  "properties": {
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              }
            },
            "description": "Individual result of sync for given nodes."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "uniconfig.manager.validate.Input": {
        "properties": {
          "target-nodes": {
            "title": "uniconfig.manager.targetuniconfignodesfields.TargetNodes",
            "properties": {
              "node": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        },
        "description": ""
      },
      "uniconfig.manager.validate.Output": {
        "properties": {
          "error-message": {
            "type": "string",
            "description": "Error message that describe overall problem."
          },
          "node-results": {
            "title": "uniconfig.manager.validateoutputfields.NodeResults",
            "properties": {
              "node-result": {
                "type": "array",
                "description": "Result of configuration validation for actual uniconfig node.",
                "items": {
                  "title": "uniconfig.manager.nodevalidateresults.NodeResult",
                  "properties": {
                    "node-id": {
                      "type": "string",
                      "description": ""
                    },
                    "error-type": {
                      "$ref": "#/components/schemas/frinx.types.ErrorType"
                    },
                    "error-message": {
                      "type": "string",
                      "description": "Error message describing cause of error."
                    },
                    "status": {
                      "$ref": "#/components/schemas/frinx.types.OperationResultType"
                    }
                  }
                }
              }
            },
            "description": "Individual result of config validation for given nodes."
          },
          "overall-status": {
            "$ref": "#/components/schemas/frinx.types.OperationResultType"
          }
        },
        "description": ""
      },
      "uniconfig.query.queryconfig.Input": {
        "properties": {
          "jsonb-path-query": {
            "type": "string",
            "description": "JSON-path used for selection and filtering of elements inside node configuration.\nOnly elements that are selected by this path are returned in the RPC output."
          },
          "node-id": {
            "type": "string",
            "description": "Node identifier."
          },
          "topology-id": {
            "type": "string",
            "description": "Topology identifier."
          }
        },
        "description": ""
      },
      "uniconfig.query.queryconfig.Output": {
        "properties": {
          "config": {
            "type": "array",
            "description": "All JSON elements returned by input JSON path.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": ""
      }
    }
  }
}